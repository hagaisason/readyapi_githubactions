<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="f7f8f2b7-e659-4dbe-a23a-5ef997e5c336" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="[Test] [OTA-19173] Event generation for the export of sensitive data" searchProperties="true" timeout="0" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="28ac7ee9-1e2f-4e86-997c-9f20776e41b1fileName">%5BTest%5D-%5BOTA-19173%5D-Event-generation-for-the-export-of-sensitive-data</con:setting>
    <con:setting id="f7f8f2b7-e659-4dbe-a23a-5ef997e5c336fileName">%5BTest%5D-%5BOTA-19173%5D-Event-generation-for-the-export-of-sensitive-data</con:setting>
  </con:settings>
  <con:testStep type="groovy" name="[Pre-Condition] Generate Access Token For Technical User" id="43bc17b8-ff10-44b9-afd8-7406eceaa3a4">
    <con:settings/>
    <con:config>
      <script><![CDATA[import groovy.json.JsonSlurper
import com.eviware.soapui.support.GroovyUtils
import org.apache.http.client.methods.CloseableHttpResponse
import org.apache.http.client.methods.HttpPost
import org.apache.http.entity.StringEntity
import org.apache.http.impl.client.CloseableHttpClient
import org.apache.http.impl.client.HttpClients
import org.apache.http.ssl.SSLContextBuilder
import org.apache.http.util.EntityUtils
import java.nio.file.Files
import java.nio.file.Paths
import java.security.KeyFactory
import java.security.KeyStore
import java.security.cert.CertificateFactory
import java.security.spec.PKCS8EncodedKeySpec
import java.util.Base64
import java.security.cert.X509Certificate
import javax.net.ssl.SSLContext
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import org.apache.http.conn.ssl.TrustSelfSignedStrategy

//declare paths to certificate and private key files, as well as the needed authorization inputs
def path = new GroovyUtils(context).getProjectPath() +"/Certificates/"
def certPath = path + "certificate.pem"
def keyPath = path + "private.key"
def username = context.expand( '${#Global#TechUser_username}' )
def password = context.expand( '${#Global#TechUser_password}' )
def clientId = context.expand( '${#Global#TechUser_clientId}' )
def clientSecret = context.expand( '${#Global#TechUser_clientSecret}' )

//log the values for the needed inputs
log.info("Cert Path: " + certPath)
log.info("Key Path: " + keyPath)
log.info("Username: " + username)
log.info("Password: " + password)
log.info("ClientId: " + clientId)
log.info("ClientSecret: " + clientSecret)

//load the certificate
def certInputStream = new FileInputStream(certPath)
def certificateFactory = CertificateFactory.getInstance("X.509")
def cert = certificateFactory.generateCertificate(certInputStream) as X509Certificate
certInputStream.close()

//load the private key
def privateKeyPEM = new String(Files.readAllBytes(Paths.get(keyPath)))
privateKeyPEM = privateKeyPEM.substring(privateKeyPEM.indexOf('-----BEGIN PRIVATE KEY-----') + 27, privateKeyPEM.indexOf('-----END PRIVATE KEY-----')).replaceAll("\\s", "")

//decode the base64 private key
def decoded = Base64.getDecoder().decode(privateKeyPEM)
def spec = new PKCS8EncodedKeySpec(decoded)
def keyFactory = KeyFactory.getInstance("RSA")
def privateKey = keyFactory.generatePrivate(spec)

//create a KeyStore and load the certificate and private key
def keyStore = KeyStore.getInstance(KeyStore.getDefaultType())
keyStore.load(null, null)
keyStore.setCertificateEntry("cert", cert)
keyStore.setKeyEntry("key", privateKey, new char[0], [cert] as java.security.cert.Certificate[])

//create an SSL context with the KeyStore
def sslContext = SSLContextBuilder.create()
                                  .loadKeyMaterial(keyStore, null)
                                  .loadTrustMaterial(new TrustSelfSignedStrategy())
                                  .build()

//create an HTTP client with the SSL context
CloseableHttpClient httpClient = HttpClients.custom()
                                            .setSSLContext(sslContext)
                                            .build()

//create the HTTP POST request
HttpPost httpPost = new HttpPost("https://idp.cloud.vwgroup.com/auth/realms/kums-mfa/protocol/openid-connect/token")
httpPost.setHeader("Content-Type", "application/x-www-form-urlencoded")

//add form parameters to the request
StringEntity entity = new StringEntity("grant_type=password&scope=openid&username=" + username +  "&password=" + password +  "&client_id=" + clientId + "&client_secret=" + clientSecret)
httpPost.setEntity(entity)

//execute the request
CloseableHttpResponse response = httpClient.execute(httpPost)
try {
    //get the response body
    String responseBody = EntityUtils.toString(response.getEntity())
    log.info("Response status: ${response.getStatusLine().getStatusCode()}")
    log.info("Response body: ${responseBody}")

    //parse the JSON response
    def jsonSlurper = new JsonSlurper()
    def jsonResponse = jsonSlurper.parseText(responseBody)

    //extract the access_token
    def accessToken = jsonResponse.access_token
    log.info("Access Token: ${accessToken}")

    //set test case level property storing the value for Code
	context.testCase.setPropertyValue("accessToken", accessToken)
	log.info("Property  <<accessToken>> was set at test case level with value <<" + accessToken + ">>")
} finally {
    response.close()
    httpClient.close()
}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="[Pre-Condition] [OTA-2661] [1] [Set-Up] Vehicle is created - Generate Vehicle Input Data" id="53e49023-baa8-48d4-a141-4cc5e6277c66">
    <con:settings/>
    <con:config>
      <script><![CDATA[import java.text.SimpleDateFormat
import java.util.Random

//declare variables for VIN, PKN, Model Name and Creation Date
String vin = "AMV" + new SimpleDateFormat("yyyyMMddHHmmss").format(new Date()).toString()
String pkn = new Random().nextInt(9 - 0 + 1) + 0 + new SimpleDateFormat("HHmmss").format(new Date()).toString()
String[] models =  ["A3", "A4", "A5", "S3", "Q7", "Q5", "TT", "Q4 e-tron", "SQ5", "Q8", "SQ8", "e-tron S"]
String modelName = models[new Random().nextInt(models.length)]
String vCreationDate = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SS'Z'").format(new Date()).toString()

//set test case level properties storing the values for VIN, PKN, Model Name and Creation Date
context.testCase.setPropertyValue("vin", vin)
log.info("Property  <<vin>> was set at test case level with value <<" + vin + ">>")
context.testCase.setPropertyValue("pkn", pkn)
log.info("Property  <<pkn>> was set at test case level with value <<" + pkn + ">>")
context.testCase.setPropertyValue("modelName", modelName)
log.info("Property  <<modelName>> was set at test case level with value <<" + modelName + ">>")
context.testCase.setPropertyValue("vCreationDate", vCreationDate)
log.info("Property  <<vCeationDate>> was set at test case level with value <<" + vCreationDate + ">>")]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="[Pre-Condition] [OTA-2661] [2] Vehicle is created" id="1db0991d-1fc7-48e5-9fb7-37dea43a6720">
    <con:settings/>
    <con:config service="VW Group Services Mock" resourcePath="/vehicles" methodName="createFakeVehicle" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="[Pre-Condition] [OTA-2661] [2] Vehicle is created" id="7942e665-7973-4849-b445-576cdb85f772" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="Authorization" value="Bearer ${#TestCase#accessToken}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>https://demo.orunext.com/api/vw-group-services-mock</con:endpoint>
        <con:request>{
   "vin":"${#TestCase#vin}",
   "mbv_model_code":"4N803A",
   "mbt_model_code":"4N42",
   "brand_code":"A",
   "creation_date":"${#TestCase#vCreationDate}",
   "pkn":"${#TestCase#pkn}",
   "delivering_dealer":"125",
   "supervising_dealer":"CHN79601076",
   "ordering_dealer":"CHN79601061",
   "equipment_codes":[
      "0K4"
   ],
   "model_year":2021,
   "model_name":"${#TestCase#modelName}",
   "oru_relevant":true,
   "oru_relevant_date":"${#TestCase#vCreationDate}",
   "update_status":"CUSTOMER_NOTIFIED"
}</con:request>
        <con:originalUri>https://demo.orunext.com/api/vw-group-services-mock/vehicles</con:originalUri>
        <con:assertion type="DataAndMetadataAssertion" id="6b953d8a-d029-4e77-bbd5-786e6dd32eaf" name="Status Line is equal to &quot;HTTP/1.1 200 OK&quot;">
          <con:configuration xsi:type="con:DataAndMetadataAssertion">
            <con:mode>Received Metadata</con:mode>
            <con:elements>
              <con:path>$['Headers']['date']</con:path>
              <con:element>date</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Mon, 06 Nov 2023 13:52:31 GMT</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-length']</con:path>
              <con:element>content-length</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['expires']</con:path>
              <con:element>expires</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-security-policy']</con:path>
              <con:element>content-security-policy</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>default-src 'self' 'unsafe-eval' 'unsafe-inline' *.orunext.com *.esrlabs.com *.vwgroup.com *.blob.core.windows.net *.blob.core.chinacloudapi.cn *.microsoftonline.com blob: data:; upgrade-insecure-requests;</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['#status#']</con:path>
              <con:element>#status#</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>true</con:enabled>
              <con:expectedValue>HTTP/1.1 200 OK</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['strict-transport-security']</con:path>
              <con:element>strict-transport-security</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>max-age=31536000 ; includeSubDomains</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['pragma']</con:path>
              <con:element>pragma</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:originalMessage>{"Headers":{"date":"Mon, 06 Nov 2023 13:52:31 GMT","content-length":"0","expires":"0","content-security-policy":"default-src 'self' 'unsafe-eval' 'unsafe-inline' *.orunext.com *.esrlabs.com *.vwgroup.com *.blob.core.windows.net *.blob.core.chinacloudapi.cn *.microsoftonline.com blob: data:; upgrade-insecure-requests;","#status#":"HTTP/1.1 200 OK","strict-transport-security":"max-age=31536000 ; includeSubDomains","pragma":"no-cache"}}</con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="4f515789-2a71-4da6-9bbc-0aff4cd795fa">
            <con:authProfile>ORU-demo</con:authProfile>
          </con:entry>
          <con:entry environmentId="9ba48164-5af1-48d4-aa59-9d1e85e3e71a">
            <con:authProfile>ORU-live</con:authProfile>
          </con:entry>
          <con:entry environmentId="7b56b5f6-5164-4fbf-8821-ef5b0d3790b7">
            <con:authProfile>ORU-app</con:authProfile>
          </con:entry>
          <con:entry environmentId="19d15dbe-9720-4a73-b417-71308b8db01e">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="[Pre-Condition] [OTA-2771] [1] [Set-Up] VehicleConfig is uploaded to the VC-Port - Generate Vehicle Configuration File" id="16376f11-cf27-436e-9f67-ae23d44ca979">
    <con:settings/>
    <con:config>
      <script><![CDATA[import java.text.SimpleDateFormat
import java.util.Random
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import com.eviware.soapui.support.GroovyUtils

/* ---------- MAIN CODE ---------- */

//declare variable for the file path
String vehicleFilesPath = new GroovyUtils(context).getProjectPath() + "\\" + context.expand('${#TestSuite#testSet}')  + "\\" + context.expand('${#TestCase#test}') + "\\vehicle-files"

//set test case level property storing the path to the vehicle files
context.testCase.setPropertyValue("vehicleFilesPath", vehicleFilesPath)
log.info("Property <<vehicleFilesPath>> was set at test case level with value <<" + vehicleFilesPath + ">>")

//crate new directory called vehicle-files if it doesn't already exist
createDirectory(vehicleFilesPath)

//declare variables for the path to the Vehicle Configuration file
String vehicleConfigurationFileName = context.expand('${#TestCase#vehicleConfigurationFileName}') 
String vehicleConfigurationFilePath = vehicleFilesPath + "\\VehicleConfiguration.json"

//set test case level property storing the path to the Vehicle Configuration file
context.testCase.setPropertyValue("vehicleConfigurationFilePath", vehicleConfigurationFilePath)
log.info("Property <<vehicleConfigurationFilePath>> was set at test case level with value <<" + vehicleConfigurationFilePath + ">>")

//declare variable for the Vehicle Configuration file
File vehicleConfigurationFile = file(vehicleFilesPath, vehicleConfigurationFileName)

//declare variable for the content of the Vehicle Configuration file
String vehicleConfigurationFileContent  = context.expand('${#TestCase#vehicleConfigurationFileContent}')

//add the Vehicle Configuration content to the file
appendToFile(vehicleConfigurationFile, vehicleConfigurationFileContent)

//declare variable for the Vehicle Configuration Hash
String vcHash = hexNumber(64)

//set test case level property storing the value for the Vehicle Configuration Hash
context.testCase.setPropertyValue("vcHash", vcHash)
log.info("Property <<vcHash>> was set at test case level with value <<" + vcHash + ">>")

//decalre variable with the parsed JSON content of the Vehicle Configuration file
def json = new JsonSlurper().parse(vehicleConfigurationFile)

//update the values for VIN, vcHash and newestEntryTimestamp
json.assemblyStatus.vehicleInformation.VIN = context.expand('${#TestCase#vin}')
json.assemblyStatusMetaData.vcHash = vcHash
json.assemblyStatusMetaData.newestEntryTimestamp = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SS'Z'").format(new Date()).toString()

//write a beautified version of the updated content back to the file
vehicleConfigurationFile.write(JsonOutput.prettyPrint(JsonOutput.toJson(json)))

/* ---------- CUSTOM METHODS ---------- */

//method that returns the current test suite formatted to match its  composite project name
public String testSuite() {
	return testRunner.testCase.testSuite.name
	.replaceAll(" ", "-").replaceAll("%", "%25").replaceAll("\\{", "%7B").replaceAll("\\}", "%7D").replaceAll("\\[", "%5B")
	.replaceAll("\\]", "%5D").replaceAll("\\(", "%28").replaceAll("\\)", "%29").replaceAll("/", "%2F").replaceAll("\\\\", "%5C")
	.replaceAll("\\+", "%2B").replaceAll("\\*", "%2A").replaceAll("\\^", "%5E").replaceAll("~", "%7E").replaceAll("=", "%3D")
	.replaceAll(">", "%3E").replaceAll("<", "%3C").replaceAll("!", "%21").replaceAll("\\?", "%3F").replaceAll("@", "%40")
	.replaceAll("#", "%23").replaceAll("\\\$", "%24").replaceAll("&", "%26").replaceAll("\\|", "%7C").replaceAll(";", "%3B")
	.replaceAll(":", "%3A").replaceAll("'", "%27").replaceAll("\"", "%22").replaceAll("`", "%60").replaceAll(",", "%2C")
}

//method that creates one or mote directories if they don't exists already
public void createDirectory(String path) {
	File directory = new File(path)
	if (!directory.exists()) {
		directory.mkdirs()
		log.info("Directory was created <<" +  path + ">>")
    }
}

// method that creates a file or overwrites an existing file with the same name, then returns it
public File file(String path, String fileName) {
	File file = null
	try {
		file = new File(path + "\\" + fileName)
		
		if (file.exists()) { 
			file.delete()
			file.createNewFile()
			log.info("File <<" +  fileName + ">> overwritten at path <<" + path + ">>")
		} 
		else {
			file.createNewFile()
			log.info("File <<" +  fileName + ">> created at path <<" + path + ">>")
		}  
	} 
	catch (IOException e) {
		log.info("An error occurred while creating or overwriting file <<" +  fileName + ">> at path <<" + path + ">>")
		e.printStackTrace();  
    }
    return file
}

//method that appends a new line of text to a file
public void appendToFile(File file, String text) {
	if (file.length() == 0) {
		file.text =  text
	} 
	else {
		file.append("\n" + text)
	}
	log.info("New line of text was added to the file <<" + file.getName() + ">> at path <<" + file.parent + ">>")
}

//method that returns an uppercase hexNumber of a given length
public String hexNumber(int length) {
	Random random = new Random()
	StringBuilder stringBuilder = new StringBuilder()
	while(stringBuilder.length() < length) {
		stringBuilder.append(Integer.toHexString(random.nextInt(16)))
	}
	return stringBuilder.toString().toUpperCase()
}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="[Pre-Condition] [OTA-2771] [2] VehicleConfig is uploaded to the VC-Port" id="3eb56064-c963-4394-9727-e0952b9fc362">
    <con:settings/>
    <con:config service="ESR Labs ORU App - Vehicle Configuration" resourcePath="/api/oru/vehicle_configurations/configurations/upload" methodName="uploadConfiguration" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="[Pre-Condition] [OTA-2771] [2] VehicleConfig is uploaded to the VC-Port" id="6549dcc8-7973-470e-a5c8-72f920e9b5b9" mediaType="multipart/form-data" postQueryString="true">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="Authorization" value="Bearer ${#TestCase#accessToken}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>https://demo.orunext.com</con:endpoint>
        <con:request/>
        <con:originalUri>https://demo.orunext.com/api/oru/vehicle_configurations/configurations/upload</con:originalUri>
        <con:assertion type="DataAndMetadataAssertion" id="51b2595c-2944-4ffa-847b-0b8e81fcbbee" name="Status Line is equal to &quot;HTTP/1.1 201 Created&quot;">
          <con:configuration xsi:type="con:DataAndMetadataAssertion">
            <con:mode>Received Metadata</con:mode>
            <con:elements>
              <con:path>$['Headers']['x-request-id']</con:path>
              <con:element>x-request-id</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>cd1b56d3a07c0a75</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['date']</con:path>
              <con:element>date</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Fri, 17 Nov 2023 14:43:05 GMT</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['expires']</con:path>
              <con:element>expires</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['transfer-encoding']</con:path>
              <con:element>transfer-encoding</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>chunked</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-security-policy']</con:path>
              <con:element>content-security-policy</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>default-src 'self' 'unsafe-eval' 'unsafe-inline' *.orunext.com *.esrlabs.com *.vwgroup.com *.blob.core.windows.net *.blob.core.chinacloudapi.cn *.microsoftonline.com blob: data:; upgrade-insecure-requests;</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-type']</con:path>
              <con:element>content-type</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>application/json</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['location']</con:path>
              <con:element>location</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>/vehicle_configurations/vehicles/AMV20231117150011/configurations/C0367D5A13E2F45A48F86F0DC21E1B8B142441DA6E3388400BB5B717EA6646B1</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['#status#']</con:path>
              <con:element>#status#</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>true</con:enabled>
              <con:expectedValue>HTTP/1.1 201 Created</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['strict-transport-security']</con:path>
              <con:element>strict-transport-security</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>max-age=31536000 ; includeSubDomains</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['pragma']</con:path>
              <con:element>pragma</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:originalMessage>{"Headers":{"x-request-id":"cd1b56d3a07c0a75","date":"Fri, 17 Nov 2023 14:43:05 GMT","expires":"0","transfer-encoding":"chunked","content-security-policy":"default-src 'self' 'unsafe-eval' 'unsafe-inline' *.orunext.com *.esrlabs.com *.vwgroup.com *.blob.core.windows.net *.blob.core.chinacloudapi.cn *.microsoftonline.com blob: data:; upgrade-insecure-requests;","content-type":"application/json","location":"/vehicle_configurations/vehicles/AMV20231117150011/configurations/C0367D5A13E2F45A48F86F0DC21E1B8B142441DA6E3388400BB5B717EA6646B1","#status#":"HTTP/1.1 201 Created","strict-transport-security":"max-age=31536000 ; includeSubDomains","pragma":"no-cache"}}</con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:assertion type="DataAndMetadataAssertion" id="4347a3dd-9c68-4434-ac45-36131fb9edc8" name="Content-Type is equal to &quot;application/json&quot;">
          <con:configuration xsi:type="con:DataAndMetadataAssertion">
            <con:mode>Received Metadata</con:mode>
            <con:elements>
              <con:path>$['Headers']['x-request-id']</con:path>
              <con:element>x-request-id</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>cd1b56d3a07c0a75</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['date']</con:path>
              <con:element>date</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Fri, 17 Nov 2023 14:43:05 GMT</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['expires']</con:path>
              <con:element>expires</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['transfer-encoding']</con:path>
              <con:element>transfer-encoding</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>chunked</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-security-policy']</con:path>
              <con:element>content-security-policy</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>default-src 'self' 'unsafe-eval' 'unsafe-inline' *.orunext.com *.esrlabs.com *.vwgroup.com *.blob.core.windows.net *.blob.core.chinacloudapi.cn *.microsoftonline.com blob: data:; upgrade-insecure-requests;</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-type']</con:path>
              <con:element>content-type</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>true</con:enabled>
              <con:expectedValue>application/json</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['location']</con:path>
              <con:element>location</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>/vehicle_configurations/vehicles/AMV20231117150011/configurations/C0367D5A13E2F45A48F86F0DC21E1B8B142441DA6E3388400BB5B717EA6646B1</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['#status#']</con:path>
              <con:element>#status#</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>HTTP/1.1 201 Created</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['strict-transport-security']</con:path>
              <con:element>strict-transport-security</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>max-age=31536000 ; includeSubDomains</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['pragma']</con:path>
              <con:element>pragma</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:originalMessage>{"Headers":{"x-request-id":"cd1b56d3a07c0a75","date":"Fri, 17 Nov 2023 14:43:05 GMT","expires":"0","transfer-encoding":"chunked","content-security-policy":"default-src 'self' 'unsafe-eval' 'unsafe-inline' *.orunext.com *.esrlabs.com *.vwgroup.com *.blob.core.windows.net *.blob.core.chinacloudapi.cn *.microsoftonline.com blob: data:; upgrade-insecure-requests;","content-type":"application/json","location":"/vehicle_configurations/vehicles/AMV20231117150011/configurations/C0367D5A13E2F45A48F86F0DC21E1B8B142441DA6E3388400BB5B717EA6646B1","#status#":"HTTP/1.1 201 Created","strict-transport-security":"max-age=31536000 ; includeSubDomains","pragma":"no-cache"}}</con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="1a870eaf-ac1f-4a03-85a9-0223ba84c30e" name="[vin] is equal to &quot;${[Pre-Condition] [OTA-2661] Vehicle is created#RawRequest#$['vin']}&quot;">
          <con:configuration>
            <path>$['vin']</path>
            <content>"${[Pre-Condition] [OTA-2661] [2] Vehicle is created#RawRequest#$['vin']}"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="8599bbbf-05ea-409c-bdb1-bb6a83726610" name="[configurationHash] is equal to &quot;${#TestCase#vcHash}&quot;">
          <con:configuration>
            <path>$['configurationHash']</path>
            <content>"${#TestCase#vcHash}"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" id="eff6eec8-8858-4db2-b043-b68f17de7bc1" name="[configurationMose] exists">
          <con:configuration>
            <path>$['configurationMose']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="9b919781-440a-49ee-a4f6-ccc05688aa34" name="[firstReport] contains the current date">
          <con:configuration>
            <scriptText>import java.text.SimpleDateFormat
import groovy.json.JsonSlurper

//get the JSON response body of the API response for the current test step
def jsonResponse = new JsonSlurper().parseText(messageExchange.response.responseContent)

//declare variables for the value of the [firstReport] key
String firstReport = jsonResponse.firstReport
//declare variables for the current date
String currentDate = new SimpleDateFormat("yyyy-MM-dd").format(new Date()).toString()

//assert that [lastReport] contains the current date
assert firstReport.contains(currentDate)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="da3d870b-5084-4939-9206-0a61dd24c6f6" name="[lastReport] contains the current date">
          <con:configuration>
            <scriptText>import java.text.SimpleDateFormat
import groovy.json.JsonSlurper

//get the JSON response body of the API response for the current test step
def jsonResponse = new JsonSlurper().parseText(messageExchange.response.responseContent)

//declare variables for the value of the [lastReport] key
String lastReport = jsonResponse.lastReport
//declare variables for the current date
String currentDate = new SimpleDateFormat("yyyy-MM-dd").format(new Date()).toString()

//assert that [lastReport] contains the current date
assert lastReport.contains(currentDate)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="VehicleConfiguration.json" value="file:${#TestCase#vehicleConfigurationFilePath}"/>
          <con:entry key="language" value="en_US"/>
          <con:entry key="brand" value="Audi"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>VehicleConfiguration.json</con:entry>
          <con:entry>brand</con:entry>
          <con:entry>language</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="4f515789-2a71-4da6-9bbc-0aff4cd795fa">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="9ba48164-5af1-48d4-aa59-9d1e85e3e71a">
            <con:authProfile>ORU-live</con:authProfile>
          </con:entry>
          <con:entry environmentId="7b56b5f6-5164-4fbf-8821-ef5b0d3790b7">
            <con:authProfile>ORU-app</con:authProfile>
          </con:entry>
          <con:entry environmentId="19d15dbe-9720-4a73-b417-71308b8db01e">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="manualTestStep" name="Pause [1]" id="6edfcab1-0591-4111-972c-39b96ee8a6de" disabled="true">
    <con:settings/>
    <con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
  </con:testStep>
  <con:testStep type="groovy" name="[A_1] [APS] Download Vehicle Configuration With Configuration History" id="c0451671-b34a-4652-90d1-c28498cd2ba0">
    <con:settings/>
    <con:config>
      <script>import java.io.File
import java.time.Duration
import java.text.SimpleDateFormat
import java.util.concurrent.TimeUnit
import java.awt.Robot
import java.awt.event.KeyEvent

import org.apache.commons.io.FileUtils

import org.openqa.selenium.firefox.ProfilesIni
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.firefox.FirefoxProfile
import org.openqa.selenium.firefox.FirefoxOptions
import org.openqa.selenium.WebDriver
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions
import org.openqa.selenium.WebElement
import org.openqa.selenium.By
import org.openqa.selenium.OutputType
import org.openqa.selenium.TakesScreenshot

import org.openqa.selenium.Dimension
import org.openqa.selenium.Point
import org.openqa.selenium.support.ui.FluentWait
import com.eviware.soapui.support.GroovyUtils
import java.awt.Toolkit

/* ---------- MAIN CODE ---------- */

//declare date-time property to be used to create all screenshots under a single directory
String dateTime = currentDateTime()

//declare prodile and set up browser options
ProfilesIni profile = new ProfilesIni()
FirefoxProfile myProfile = profile.getProfile("selenium")
FirefoxOptions options = new FirefoxOptions()
options.setProfile(myProfile)

//declare web driver
WebDriver driver = new FirefoxDriver(options)

//set the browser window size
driver.manage().window().setSize(new Dimension(1920, 1080))

//get the screen dimensions to center the window
Toolkit toolkit = Toolkit.getDefaultToolkit()
int screenWidth = toolkit.getScreenSize().width
int screenHeight = toolkit.getScreenSize().height

//calculate the top-left corner position for centering the window
int x = (screenWidth - 1920) / 2
int y = (screenHeight - 1080) / 2

//set the browser window position
driver.manage().window().setPosition(new Point(x, y))

//set the waitting times
driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS)
driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS)
def wait = new WebDriverWait(driver, Duration.ofSeconds(60)) 
def fluentWait = new FluentWait&lt;>(driver)
        .withTimeout(Duration.ofSeconds(90))
        .pollingEvery(Duration.ofMillis(500))
        .ignoring(NoSuchElementException.class)

//declare locators for the UI elements
By continueButton = By.id("kc-login")
By dropDown = By.xpath("//div[@class='ng-value-container']")
By option = By.xpath("//span[text()='public']")
By proceedButton = By.xpath("//button[normalize-space()='Proceed']")
By vehicleConfigurationPanel = By.id("vehicle_configurations_main")
By searchBox = By.xpath("//textarea[@placeholder='Enter VIN(s) to search for']")
By searchButton = By.xpath("//button[normalize-space()='Search']")
String vin = context.expand('${#TestCase#vin}') 
By vinEntry = By.xpath("//a[normalize-space()='" + vin + "']")
By downloadButton = By.xpath("//i[@class='fa fa-download']")
By includeHistoryCheckbox = By.xpath("//label[@for='includeHistory']")
By okButton = By.xpath("//button[normalize-space()='OK']")

//Action - Open the OruNext web application
try {
	driver.get("https://demo.orunext.com/")
	//this first ESC press does not take place. The second one does. I don't know why for now.
	//pressEsc()
	wait.until(ExpectedConditions.presenceOfElementLocated(continueButton))
	log.info("[Action] [Passed] Open the OruNext web application")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Open the OruNext web application | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Continue button
try {
	driver.findElement(continueButton).click()
	//pressEsc()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(dropDown)))
	log.info("[Action] [Passed] Click the Continue button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Continue button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Choose tenant from dropdown
try {
	driver.findElement(dropDown).click()
	driver.findElement(option).click()
	driver.findElement(proceedButton).click()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(vehicleConfigurationPanel)))
	log.info("[Action] [Passed] Action - Choose tenant from dropdown")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Action - Choose tenant from dropdown | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Vehicle Configuration panel
try {
	driver.findElement(vehicleConfigurationPanel).click()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(searchButton)))
	log.info("[Action] [Passed] Click the Vehicle Configuration panel")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Vehicle Configuration panel | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Enter the VIN value in the search box
try {
	driver.findElement(searchBox).sendKeys(vin)
	log.info("[Action] [Passed] Enter the VIN value in the search box")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Enter the VIN value in the search box | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Search button
try {
	driver.findElement(searchButton).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(vinEntry))
	log.info("[Action] [Passed] Click the Search button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Search button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Download button
try {
	driver.findElement(downloadButton).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(includeHistoryCheckbox))
	log.info("[Action] [Passed] Click the Download button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Download button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Include Configuration History checkbox
try {
	driver.findElement(includeHistoryCheckbox).click()
	log.info("[Action] [Passed] Click the Include Configuration History checkbox")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Include Configuration History checkbox | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the OK button
try {
	driver.findElement(okButton).click()
	log.info("[Action] [Passed] Click the OK button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the OK button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Close the browser
log.info("[Action] Close the browser")
driver.quit();

/* ---------- CUSTOM METHODS ---------- */

//method to press ESC
public void pressEsc() {
	Robot robot = new Robot()
	robot.delay(2500)
	robot.keyPress(KeyEvent.VK_ESCAPE)
	robot.keyRelease(KeyEvent.VK_ESCAPE)
}

//method to return current date-time
public String currentDateTime() {
	return new SimpleDateFormat("ddMMyyyyHHmmss").format(new Date()).toString()
}

//method to format a string to match the ReadyAPI directory naming convention
public String formattedString(String string) {
	return string
	.replaceAll(" ", "-").replaceAll("%", "%25").replaceAll("\\{", "%7B").replaceAll("\\}", "%7D").replaceAll("\\[", "%5B")
	.replaceAll("\\]", "%5D").replaceAll("\\(", "%28").replaceAll("\\)", "%29").replaceAll("/", "%2F").replaceAll("\\\\", "%5C")
	.replaceAll("\\+", "%2B").replaceAll("\\*", "%2A").replaceAll("\\^", "%5E").replaceAll("~", "%7E").replaceAll("=", "%3D")
	.replaceAll(">", "%3E").replaceAll("&lt;", "%3C").replaceAll("!", "%21").replaceAll("\\?", "%3F").replaceAll("@", "%40")
	.replaceAll("#", "%23").replaceAll("\\\$", "%24").replaceAll("&amp;", "%26").replaceAll("\\|", "%7C").replaceAll(";", "%3B")
	.replaceAll(":", "%3A").replaceAll("'", "%27").replaceAll("\"", "%22").replaceAll("`", "%60").replaceAll(",", "%2C")
}

//method to take a screenshot
public void takeScreenshot(WebDriver  webDriver,  String dateTime) throws Exception {
	Thread.sleep(1000) 
	TakesScreenshot screenshot  = ((TakesScreenshot) webDriver)
	File screenshotFile = screenshot.getScreenshotAs(OutputType.FILE)
	String path = new GroovyUtils(context).getProjectPath() +
						"\\Screenshots\\" +  
						context.expand('${#TestSuite#testSet}')  + "\\" +
						context.expand('${#TestCase#test}')  + "\\" + 
						formattedString(testRunner.testCase.getTestStepAt(context.getCurrentStepIndex()).name) +
						"\\Screenshots_" + dateTime + "\\Screenshot_" + currentDateTime() + ".png"
	File destinationFile = new File(path)
	FileUtils.copyFile(screenshotFile, destinationFile)
}

//method to take a screenshot and close the browser
public void takeScreenshotAndCloseBrowser(WebDriver  webDriver,  String dateTime) {
	takeScreenshot(webDriver, dateTime)
	log.info("Closing the browser in response to failure")
	webDriver.quit()
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="delay" name="[Delay] [1] 30 Seconds" id="dc919995-a59e-4b74-8d5f-5a382186c86c">
    <con:settings/>
    <con:config>
      <delay>30000</delay>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="[E_1] [APS] Check That Logs Have Been Generated" id="70967980-d7d2-4232-b80e-66ca73921261">
    <con:settings/>
    <con:config>
      <script>import java.io.File
import java.time.Duration
import java.text.SimpleDateFormat
import java.util.concurrent.TimeUnit
import java.awt.Robot
import java.awt.event.KeyEvent

import org.apache.commons.io.FileUtils

import org.openqa.selenium.firefox.ProfilesIni
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.firefox.FirefoxProfile
import org.openqa.selenium.firefox.FirefoxOptions
import org.openqa.selenium.WebDriver
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions
import org.openqa.selenium.WebElement
import org.openqa.selenium.By
import org.openqa.selenium.OutputType
import org.openqa.selenium.TakesScreenshot

import org.openqa.selenium.Dimension
import org.openqa.selenium.Point
import org.openqa.selenium.support.ui.FluentWait
import com.eviware.soapui.support.GroovyUtils
import java.awt.Toolkit

/* ---------- MAIN CODE ---------- */

//declare date-time property to be used to create all screenshots under a single directory
String dateTime = currentDateTime()

//declare prodile and set up browser options
ProfilesIni profile = new ProfilesIni()
FirefoxProfile myProfile = profile.getProfile("selenium")
FirefoxOptions options = new FirefoxOptions()
options.setProfile(myProfile)

//declare web driver
WebDriver driver = new FirefoxDriver(options)

//set the browser window size
driver.manage().window().setSize(new Dimension(1920, 1080))

//get the screen dimensions to center the window
Toolkit toolkit = Toolkit.getDefaultToolkit()
int screenWidth = toolkit.getScreenSize().width
int screenHeight = toolkit.getScreenSize().height

//calculate the top-left corner position for centering the window
int x = (screenWidth - 1920) / 2
int y = (screenHeight - 1080) / 2

//set the browser window position
driver.manage().window().setPosition(new Point(x, y))

//set the waitting times
driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS)
driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS)
def wait = new WebDriverWait(driver, Duration.ofSeconds(60)) 
def fluentWait = new FluentWait&lt;>(driver)
        .withTimeout(Duration.ofSeconds(90))
        .pollingEvery(Duration.ofMillis(500))
        .ignoring(NoSuchElementException.class)

//declare variable for filter time window
String timeValue = "90"

//declare string variables for the expected values
String expectedIndex = context.expand('${#TestCase#expectedIndex}') 
String expectedActingUser = "edrqa4b"
String expectedAction = "export"
String expectedApplicationName = "VCPort"
String expectedDescription = "Vehicle configuration history export"
String expectedEventId = "3,030,002"
String expectedEventType = context.expand('${#TestCase#expectedEventType}') 
String expectedLoggedInUser = "edrqa4b"
String expectedResult = "successful"

String url = context.expand('${#TestCase#url}')
			.replace("timeValue", timeValue)
			.replace("indexValue", expectedIndex)
			.replace("actingUserValue", expectedActingUser)
			.replace("actionValue", expectedAction)
			.replace("applicationNameValue", expectedApplicationName)
			.replace("descriptionValue", expectedDescription.replace(" ", "%20"))
			.replace("eventIdValue", expectedEventId.replace(",", ""))
			.replace("eventTypeValue", expectedEventType)
			.replace("loggedInUserValue", expectedLoggedInUser)
			.replace("resultValue", expectedResult)

//declare locators for the UI elements
By continueButton = By.id("kc-login")
By dropDown = By.xpath("//div[@class='ng-value-container']")
By option = By.xpath("//span[text()='public']")
By proceedButton = By.xpath("//button[normalize-space()='Proceed']")
By kibanaIcon = By.xpath("//i[@class='fas fa-chart-bar']")
By expandButton = By.xpath("//button[@aria-label='Toggle row details']//span[@class='euiButtonContent euiButtonEmpty__content']")
By singleDocumentLink = By.xpath("//a[normalize-space()='View single document']")
By tableTab = By.xpath("//span[normalize-space()='Table']")
By indexValue = By.xpath("//div[@data-test-subj='tableDocViewRow-_index-value']")
By actingUserValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.actingUser-value']")
By actionValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.action-value']")
By applicationNameValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.applicationName-value']")
By descriptionValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.description-value']")
By eventIdValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.eventId-value']")
By eventTypeValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.eventType-value']")
By loggedInUserValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.loggedInUser-value']")
By resultValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.result-value']")

//Action - Open the OruNext web application
try {
	driver.get("https://demo.orunext.com/")
	//this first ESC press does not take place. The second one does. I don't know why for now.
	//pressEsc()
	wait.until(ExpectedConditions.presenceOfElementLocated(continueButton))
	log.info("[Action] [Passed] Open the OruNext web application")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Open the OruNext web application | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Continue button
try {
	driver.findElement(continueButton).click()
	//pressEsc()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(dropDown)))
	log.info("[Action] [Passed] Click the Continue button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Continue button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Choose tenant from dropdown
try {
	driver.findElement(dropDown).click()
	driver.findElement(option).click()
	driver.findElement(proceedButton).click()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(kibanaIcon)))
	log.info("[Action] [Passed] Action - Choose tenant from dropdown")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Action - Choose tenant from dropdown | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Open the Kibana web application
try {
	driver.get(url)
	wait.until(ExpectedConditions.presenceOfElementLocated(expandButton))
	log.info("[Action] [Passed] Open the Kibana web application")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Open the Kibana web application | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Expand button
try {
	driver.findElement(expandButton).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(singleDocumentLink))
	log.info("[Action] [Passed] Click the Expand button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Expand button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Single Document  link
try {
	driver.findElement(singleDocumentLink).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(tableTab))
	log.info("[Action] [Passed] Click the Single Document link")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Single Document link | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Validate the Single Document Values
try {
	assert driver.findElement(indexValue).getText() == expectedIndex
	assert driver.findElement(actingUserValue).getText() == expectedActingUser
	assert driver.findElement(actionValue).getText() == expectedAction
	assert driver.findElement(applicationNameValue).getText() == expectedApplicationName
	assert driver.findElement(descriptionValue).getText() == expectedDescription
	assert driver.findElement(eventIdValue).getText() == expectedEventId
	assert driver.findElement(eventTypeValue).getText() == expectedEventType
	assert driver.findElement(loggedInUserValue).getText() == expectedLoggedInUser
	assert driver.findElement(resultValue).getText() == expectedResult

	log.info("[Action] [Completed] Validate the Single Document Values")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Validate the Single Document Values | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Close the browser
log.info("[Action] Close the browser")
driver.quit();

/* ---------- CUSTOM METHODS ---------- */

//method to press ESC
public void pressEsc() {
	Robot robot = new Robot()
	robot.delay(2500)
	robot.keyPress(KeyEvent.VK_ESCAPE)
	robot.keyRelease(KeyEvent.VK_ESCAPE)
}

//method to return current date-time
public String currentDateTime() {
	return new SimpleDateFormat("ddMMyyyyHHmmss").format(new Date()).toString()
}

//method to format a string to match the ReadyAPI directory naming convention
public String formattedString(String string) {
	return string
	.replaceAll(" ", "-").replaceAll("%", "%25").replaceAll("\\{", "%7B").replaceAll("\\}", "%7D").replaceAll("\\[", "%5B")
	.replaceAll("\\]", "%5D").replaceAll("\\(", "%28").replaceAll("\\)", "%29").replaceAll("/", "%2F").replaceAll("\\\\", "%5C")
	.replaceAll("\\+", "%2B").replaceAll("\\*", "%2A").replaceAll("\\^", "%5E").replaceAll("~", "%7E").replaceAll("=", "%3D")
	.replaceAll(">", "%3E").replaceAll("&lt;", "%3C").replaceAll("!", "%21").replaceAll("\\?", "%3F").replaceAll("@", "%40")
	.replaceAll("#", "%23").replaceAll("\\\$", "%24").replaceAll("&amp;", "%26").replaceAll("\\|", "%7C").replaceAll(";", "%3B")
	.replaceAll(":", "%3A").replaceAll("'", "%27").replaceAll("\"", "%22").replaceAll("`", "%60").replaceAll(",", "%2C")
}

//method to take a screenshot
public void takeScreenshot(WebDriver  webDriver,  String dateTime) throws Exception {
	Thread.sleep(1000) 
	TakesScreenshot screenshot  = ((TakesScreenshot) webDriver)
	File screenshotFile = screenshot.getScreenshotAs(OutputType.FILE)
	String path = new GroovyUtils(context).getProjectPath() +
						"\\Screenshots\\" +  
						context.expand('${#TestSuite#testSet}')  + "\\" +
						context.expand('${#TestCase#test}')  + "\\" + 
						formattedString(testRunner.testCase.getTestStepAt(context.getCurrentStepIndex()).name) +
						"\\Screenshots_" + dateTime + "\\Screenshot_" + currentDateTime() + ".png"
	File destinationFile = new File(path)
	FileUtils.copyFile(screenshotFile, destinationFile)
}

//method to take a screenshot and close the browser
public void takeScreenshotAndCloseBrowser(WebDriver  webDriver,  String dateTime) {
	takeScreenshot(webDriver, dateTime)
	log.info("Closing the browser in response to failure")
	webDriver.quit()
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="manualTestStep" name="Pause [2]" id="339180c6-2a48-454f-887e-05054408dc5d" disabled="true">
    <con:settings/>
    <con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
  </con:testStep>
  <con:testStep type="restrequest" name="[A_2] [APS] [1] Fail To Download Vehicle Configuration With Configuration History" id="b889fdfe-c37f-4e02-9b72-f622d12db360">
    <con:settings/>
    <con:config service="ESR Labs ORU App - Vehicle Configuration" resourcePath="/api/oru/vehicle_configurations/configurations/download" methodName="downloadVehicleConfigurations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="[A_2] [APS] [1] Fail To Download Vehicle Configuration With Configuration History" id="23e8cec8-35be-46dc-a34f-62b7b16fb75c" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="Authorization" value="Bearer ${#TestCase#accessToken}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>https://demo.orunext.com</con:endpoint>
        <con:request>["AMV0"]</con:request>
        <con:originalUri>https://demo.orunext.com/api/oru/vehicle_configurations/configurations/download</con:originalUri>
        <con:assertion type="DataAndMetadataAssertion" name="Status Line is equal to &quot;HTTP/1.1 400 Bad Request&quot;" id="c328cfc5-8350-435b-9c97-5633d4862c3f">
          <con:configuration xsi:type="con:DataAndMetadataAssertion">
            <con:mode>Received Metadata</con:mode>
            <con:elements>
              <con:path>$['Headers']['date']</con:path>
              <con:element>date</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Thu, 29 Feb 2024 11:58:23 GMT</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['expires']</con:path>
              <con:element>expires</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['transfer-encoding']</con:path>
              <con:element>transfer-encoding</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>chunked</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-content-type-options']</con:path>
              <con:element>x-content-type-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>nosniff</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-xss-protection']</con:path>
              <con:element>x-xss-protection</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-frame-options']</con:path>
              <con:element>x-frame-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>DENY</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-type']</con:path>
              <con:element>content-type</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>application/json</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['#status#']</con:path>
              <con:element>#status#</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>true</con:enabled>
              <con:expectedValue>HTTP/1.1 400 Bad Request</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['cache-control']</con:path>
              <con:element>cache-control</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache, no-store, max-age=0, must-revalidate</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['strict-transport-security']</con:path>
              <con:element>strict-transport-security</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>max-age=31536000 ; includeSubDomains</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['pragma']</con:path>
              <con:element>pragma</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:originalMessage>{"Headers":{"date":"Thu, 29 Feb 2024 11:58:23 GMT","expires":"0","transfer-encoding":"chunked","x-content-type-options":"nosniff","x-xss-protection":"0","x-frame-options":"DENY","content-type":"application/json","#status#":"HTTP/1.1 404 Not Found","cache-control":"no-cache, no-store, max-age=0, must-revalidate","strict-transport-security":"max-age=31536000 ; includeSubDomains","pragma":"no-cache"}}</con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:assertion type="DataAndMetadataAssertion" name="Content-Type is equal to &quot;application/json&quot;" id="1ef0ad57-3d4f-4ff2-8d01-705aff93adad">
          <con:configuration xsi:type="con:DataAndMetadataAssertion">
            <con:mode>Received Metadata</con:mode>
            <con:elements>
              <con:path>$['Headers']['date']</con:path>
              <con:element>date</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Thu, 29 Feb 2024 11:58:23 GMT</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['expires']</con:path>
              <con:element>expires</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['transfer-encoding']</con:path>
              <con:element>transfer-encoding</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>chunked</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-content-type-options']</con:path>
              <con:element>x-content-type-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>nosniff</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-xss-protection']</con:path>
              <con:element>x-xss-protection</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-frame-options']</con:path>
              <con:element>x-frame-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>DENY</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-type']</con:path>
              <con:element>content-type</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>true</con:enabled>
              <con:expectedValue>application/json</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['#status#']</con:path>
              <con:element>#status#</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>HTTP/1.1 404 Not Found</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['cache-control']</con:path>
              <con:element>cache-control</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache, no-store, max-age=0, must-revalidate</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['strict-transport-security']</con:path>
              <con:element>strict-transport-security</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>max-age=31536000 ; includeSubDomains</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['pragma']</con:path>
              <con:element>pragma</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:originalMessage>{"Headers":{"date":"Thu, 29 Feb 2024 11:58:23 GMT","expires":"0","transfer-encoding":"chunked","x-content-type-options":"nosniff","x-xss-protection":"0","x-frame-options":"DENY","content-type":"application/json","#status#":"HTTP/1.1 404 Not Found","cache-control":"no-cache, no-store, max-age=0, must-revalidate","strict-transport-security":"max-age=31536000 ; includeSubDomains","pragma":"no-cache"}}</con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[status] is equal to &quot;400&quot;" id="ebd5ca09-3c9a-45b3-ba76-193b2733bc4b">
          <con:configuration>
            <path>$['status']</path>
            <content>400</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[error] is equal to &quot;Bad Request&quot;" id="5d1ae576-d7e4-4bf6-becc-285bb85b7bfa">
          <con:configuration>
            <path>$['error']</path>
            <content>"Bad Request"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[message] is equal to&quot;Invalid format&quot;" id="98c18aa9-f541-4252-9fb2-d33e4ca36324">
          <con:configuration>
            <path>$['message']</path>
            <content>"Invalid JSON format"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" name="[ref] exists" id="a26271ef-c7ce-40be-9842-6b2aad35978e">
          <con:configuration>
            <path>$['ref']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[path] is equal to &quot;/vehicle_configurations/configurations/download&quot;" id="09d03fc7-826c-48a0-aa6e-9d92451f9602">
          <con:configuration>
            <path>$['path']</path>
            <content>"/vehicle_configurations/configurations/download"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" name="[timestamp] contains the current date" id="488e22f6-e9de-4394-9565-2bff419effb3">
          <con:configuration>
            <scriptText>import java.text.SimpleDateFormat
import groovy.json.JsonSlurper

//get the JSON response body of the API response for the current test step
def jsonResponse = new JsonSlurper().parseText(messageExchange.response.responseContent)

//declare variables for the value of the [timestamp] key
String timestamp = jsonResponse.timestamp
//declare variables for the current date
String currentDate = new SimpleDateFormat("yyyy-MM-dd").format(new Date()).toString()

//assert that [timestamp] contains the current date
assert timestamp.contains(currentDate)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="includeHistory" value="true"/>
          <con:entry key="includeMoseSignatures" value="false"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>includeHistory</con:entry>
          <con:entry>includeMoseSignatures</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="4f515789-2a71-4da6-9bbc-0aff4cd795fa">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="9ba48164-5af1-48d4-aa59-9d1e85e3e71a">
            <con:authProfile>ORU-live</con:authProfile>
          </con:entry>
          <con:entry environmentId="7b56b5f6-5164-4fbf-8821-ef5b0d3790b7">
            <con:authProfile>ORU-app</con:authProfile>
          </con:entry>
          <con:entry environmentId="19d15dbe-9720-4a73-b417-71308b8db01e">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="[A_2] [APS] [2] Fail To Download Vehicle Configuration With Configuration History" id="4f7ac88b-40e6-45af-9813-c8aa4615c9e8">
    <con:settings/>
    <con:config service="ESR Labs ORU App - Vehicle Configuration" resourcePath="/api/oru/vehicle_configurations/configurations/download" methodName="downloadVehicleConfigurations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="[A_2] [APS] [2] Fail To Download Vehicle Configuration With Configuration History" id="23e8cec8-35be-46dc-a34f-62b7b16fb75c" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="Authorization" value="Bearer ${#TestCase#accessToken}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>https://demo.orunext.com</con:endpoint>
        <con:request>["${[Pre-Condition] [OTA-2661] [2] Vehicle is created#RawRequest#$['vin']}"]</con:request>
        <con:originalUri>https://demo.orunext.com/api/oru/vehicle_configurations/configurations/download</con:originalUri>
        <con:assertion type="DataAndMetadataAssertion" name="Status Line is equal to &quot;HTTP/1.1 400 Bad Request&quot;" id="c328cfc5-8350-435b-9c97-5633d4862c3f">
          <con:configuration xsi:type="con:DataAndMetadataAssertion">
            <con:mode>Received Metadata</con:mode>
            <con:elements>
              <con:path>$['Headers']['date']</con:path>
              <con:element>date</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Thu, 29 Feb 2024 11:58:23 GMT</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['expires']</con:path>
              <con:element>expires</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['transfer-encoding']</con:path>
              <con:element>transfer-encoding</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>chunked</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-content-type-options']</con:path>
              <con:element>x-content-type-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>nosniff</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-xss-protection']</con:path>
              <con:element>x-xss-protection</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-frame-options']</con:path>
              <con:element>x-frame-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>DENY</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-type']</con:path>
              <con:element>content-type</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>application/json</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['#status#']</con:path>
              <con:element>#status#</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>true</con:enabled>
              <con:expectedValue>HTTP/1.1 400 Bad Request</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['cache-control']</con:path>
              <con:element>cache-control</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache, no-store, max-age=0, must-revalidate</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['strict-transport-security']</con:path>
              <con:element>strict-transport-security</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>max-age=31536000 ; includeSubDomains</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['pragma']</con:path>
              <con:element>pragma</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:originalMessage>{"Headers":{"date":"Thu, 29 Feb 2024 11:58:23 GMT","expires":"0","transfer-encoding":"chunked","x-content-type-options":"nosniff","x-xss-protection":"0","x-frame-options":"DENY","content-type":"application/json","#status#":"HTTP/1.1 404 Not Found","cache-control":"no-cache, no-store, max-age=0, must-revalidate","strict-transport-security":"max-age=31536000 ; includeSubDomains","pragma":"no-cache"}}</con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:assertion type="DataAndMetadataAssertion" name="Content-Type is equal to &quot;application/json&quot;" id="1ef0ad57-3d4f-4ff2-8d01-705aff93adad">
          <con:configuration xsi:type="con:DataAndMetadataAssertion">
            <con:mode>Received Metadata</con:mode>
            <con:elements>
              <con:path>$['Headers']['date']</con:path>
              <con:element>date</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Thu, 29 Feb 2024 11:58:23 GMT</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['expires']</con:path>
              <con:element>expires</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['transfer-encoding']</con:path>
              <con:element>transfer-encoding</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>chunked</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-content-type-options']</con:path>
              <con:element>x-content-type-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>nosniff</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-xss-protection']</con:path>
              <con:element>x-xss-protection</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-frame-options']</con:path>
              <con:element>x-frame-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>DENY</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-type']</con:path>
              <con:element>content-type</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>true</con:enabled>
              <con:expectedValue>application/json</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['#status#']</con:path>
              <con:element>#status#</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>HTTP/1.1 404 Not Found</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['cache-control']</con:path>
              <con:element>cache-control</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache, no-store, max-age=0, must-revalidate</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['strict-transport-security']</con:path>
              <con:element>strict-transport-security</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>max-age=31536000 ; includeSubDomains</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['pragma']</con:path>
              <con:element>pragma</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:originalMessage>{"Headers":{"date":"Thu, 29 Feb 2024 11:58:23 GMT","expires":"0","transfer-encoding":"chunked","x-content-type-options":"nosniff","x-xss-protection":"0","x-frame-options":"DENY","content-type":"application/json","#status#":"HTTP/1.1 404 Not Found","cache-control":"no-cache, no-store, max-age=0, must-revalidate","strict-transport-security":"max-age=31536000 ; includeSubDomains","pragma":"no-cache"}}</con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[status] is equal to &quot;400&quot;" id="ebd5ca09-3c9a-45b3-ba76-193b2733bc4b">
          <con:configuration>
            <path>$['status']</path>
            <content>400</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[error] is equal to &quot;Bad Request&quot;" id="5d1ae576-d7e4-4bf6-becc-285bb85b7bfa">
          <con:configuration>
            <path>$['error']</path>
            <content>"Bad Request"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[message] is equal to &quot;Failed to convert value of type 'java.lang.String' to required type 'boolean'; Invalid boolean value []&quot;" id="98c18aa9-f541-4252-9fb2-d33e4ca36324">
          <con:configuration>
            <path>$['message']</path>
            <content>"Failed to convert value of type 'java.lang.String' to required type 'boolean'; Invalid boolean value []"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" name="[ref] exists" id="a26271ef-c7ce-40be-9842-6b2aad35978e">
          <con:configuration>
            <path>$['ref']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[path] is equal to &quot;/vehicle_configurations/configurations/download&quot;" id="09d03fc7-826c-48a0-aa6e-9d92451f9602">
          <con:configuration>
            <path>$['path']</path>
            <content>"/vehicle_configurations/configurations/download"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" name="[timestamp] contains the current date" id="488e22f6-e9de-4394-9565-2bff419effb3">
          <con:configuration>
            <scriptText>import java.text.SimpleDateFormat
import groovy.json.JsonSlurper

//get the JSON response body of the API response for the current test step
def jsonResponse = new JsonSlurper().parseText(messageExchange.response.responseContent)

//declare variables for the value of the [timestamp] key
String timestamp = jsonResponse.timestamp
//declare variables for the current date
String currentDate = new SimpleDateFormat("yyyy-MM-dd").format(new Date()).toString()

//assert that [timestamp] contains the current date
assert timestamp.contains(currentDate)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="includeHistory" value="true"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>includeHistory</con:entry>
          <con:entry>includeMoseSignatures</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="4f515789-2a71-4da6-9bbc-0aff4cd795fa">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="9ba48164-5af1-48d4-aa59-9d1e85e3e71a">
            <con:authProfile>ORU-live</con:authProfile>
          </con:entry>
          <con:entry environmentId="7b56b5f6-5164-4fbf-8821-ef5b0d3790b7">
            <con:authProfile>ORU-app</con:authProfile>
          </con:entry>
          <con:entry environmentId="19d15dbe-9720-4a73-b417-71308b8db01e">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="[A_2] [APS] [3] Fail To Download Vehicle Configuration With Configuration History" id="e064aceb-0134-4c33-a0e2-07293cb03a2e">
    <con:settings/>
    <con:config service="ESR Labs ORU App - Vehicle Configuration" resourcePath="/api/oru/vehicle_configurations/configurations/download" methodName="downloadVehicleConfigurations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="[A_2] [APS] [3] Fail To Download Vehicle Configuration With Configuration History" id="23e8cec8-35be-46dc-a34f-62b7b16fb75c" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="Authorization" value="Bearer ${#TestCase#accessToken}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>https://demo.orunext.com</con:endpoint>
        <con:request/>
        <con:originalUri>https://demo.orunext.com/api/oru/vehicle_configurations/configurations/download</con:originalUri>
        <con:assertion type="DataAndMetadataAssertion" name="Status Line is equal to &quot;HTTP/1.1 400 Bad Request&quot;" id="9294cc6a-db36-4c53-8444-2453ca048d8b">
          <con:configuration xsi:type="con:DataAndMetadataAssertion">
            <con:mode>Received Metadata</con:mode>
            <con:elements>
              <con:path>$['Headers']['date']</con:path>
              <con:element>date</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Thu, 29 Feb 2024 11:58:23 GMT</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['expires']</con:path>
              <con:element>expires</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['transfer-encoding']</con:path>
              <con:element>transfer-encoding</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>chunked</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-content-type-options']</con:path>
              <con:element>x-content-type-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>nosniff</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-xss-protection']</con:path>
              <con:element>x-xss-protection</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-frame-options']</con:path>
              <con:element>x-frame-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>DENY</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-type']</con:path>
              <con:element>content-type</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>application/json</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['#status#']</con:path>
              <con:element>#status#</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>true</con:enabled>
              <con:expectedValue>HTTP/1.1 400 Bad Request</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['cache-control']</con:path>
              <con:element>cache-control</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache, no-store, max-age=0, must-revalidate</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['strict-transport-security']</con:path>
              <con:element>strict-transport-security</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>max-age=31536000 ; includeSubDomains</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['pragma']</con:path>
              <con:element>pragma</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:originalMessage>{"Headers":{"date":"Thu, 29 Feb 2024 11:58:23 GMT","expires":"0","transfer-encoding":"chunked","x-content-type-options":"nosniff","x-xss-protection":"0","x-frame-options":"DENY","content-type":"application/json","#status#":"HTTP/1.1 404 Not Found","cache-control":"no-cache, no-store, max-age=0, must-revalidate","strict-transport-security":"max-age=31536000 ; includeSubDomains","pragma":"no-cache"}}</con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:assertion type="DataAndMetadataAssertion" name="Content-Type is equal to &quot;application/json&quot;" id="ad6636eb-9b06-4eb7-8aa4-87e4159dc35c">
          <con:configuration xsi:type="con:DataAndMetadataAssertion">
            <con:mode>Received Metadata</con:mode>
            <con:elements>
              <con:path>$['Headers']['date']</con:path>
              <con:element>date</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Thu, 29 Feb 2024 11:58:23 GMT</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['expires']</con:path>
              <con:element>expires</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['transfer-encoding']</con:path>
              <con:element>transfer-encoding</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>chunked</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-content-type-options']</con:path>
              <con:element>x-content-type-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>nosniff</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-xss-protection']</con:path>
              <con:element>x-xss-protection</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-frame-options']</con:path>
              <con:element>x-frame-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>DENY</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-type']</con:path>
              <con:element>content-type</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>true</con:enabled>
              <con:expectedValue>application/json</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['#status#']</con:path>
              <con:element>#status#</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>HTTP/1.1 404 Not Found</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['cache-control']</con:path>
              <con:element>cache-control</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache, no-store, max-age=0, must-revalidate</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['strict-transport-security']</con:path>
              <con:element>strict-transport-security</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>max-age=31536000 ; includeSubDomains</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['pragma']</con:path>
              <con:element>pragma</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:originalMessage>{"Headers":{"date":"Thu, 29 Feb 2024 11:58:23 GMT","expires":"0","transfer-encoding":"chunked","x-content-type-options":"nosniff","x-xss-protection":"0","x-frame-options":"DENY","content-type":"application/json","#status#":"HTTP/1.1 404 Not Found","cache-control":"no-cache, no-store, max-age=0, must-revalidate","strict-transport-security":"max-age=31536000 ; includeSubDomains","pragma":"no-cache"}}</con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[status] is equal to &quot;400&quot;" id="1f725bc9-1e39-4330-9a21-8810c4f57d87">
          <con:configuration>
            <path>$['status']</path>
            <content>400</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[error] is equal to &quot;Bad Request&quot;" id="8469cc8a-3ab1-4540-a466-04e0e266164b">
          <con:configuration>
            <path>$['error']</path>
            <content>"Bad Request"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[message] is equal to&quot;Invalid format&quot;" id="149d44fa-8f62-4766-bb85-ae4a284f4dc2">
          <con:configuration>
            <path>$['message']</path>
            <content>"Invalid format"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" name="[ref] exists" id="141db229-86b0-4f02-93cd-9718e4f787a7">
          <con:configuration>
            <path>$['ref']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[path] is equal to &quot;/vehicle_configurations/configurations/download&quot;" id="97d34fe8-4023-48a9-bccb-cc48563fdb00">
          <con:configuration>
            <path>$['path']</path>
            <content>"/vehicle_configurations/configurations/download"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" name="[timestamp] contains the current date" id="2e64082f-d27a-4cc9-b3c3-d013f9690647">
          <con:configuration>
            <scriptText>import java.text.SimpleDateFormat
import groovy.json.JsonSlurper

//get the JSON response body of the API response for the current test step
def jsonResponse = new JsonSlurper().parseText(messageExchange.response.responseContent)

//declare variables for the value of the [timestamp] key
String timestamp = jsonResponse.timestamp
//declare variables for the current date
String currentDate = new SimpleDateFormat("yyyy-MM-dd").format(new Date()).toString()

//assert that [timestamp] contains the current date
assert timestamp.contains(currentDate)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="includeHistory" value="true"/>
          <con:entry key="includeMoseSignatures" value="false"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>includeHistory</con:entry>
          <con:entry>includeMoseSignatures</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="4f515789-2a71-4da6-9bbc-0aff4cd795fa">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="9ba48164-5af1-48d4-aa59-9d1e85e3e71a">
            <con:authProfile>ORU-live</con:authProfile>
          </con:entry>
          <con:entry environmentId="7b56b5f6-5164-4fbf-8821-ef5b0d3790b7">
            <con:authProfile>ORU-app</con:authProfile>
          </con:entry>
          <con:entry environmentId="19d15dbe-9720-4a73-b417-71308b8db01e">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="delay" name="[Delay] [2] 30 Seconds" id="7572859c-e883-44bd-9be7-5c236e86812e">
    <con:settings/>
    <con:config>
      <delay>30000</delay>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="[E_2] [APS] Check That Logs Have Been Generated For The Three Actions" id="e57e09f6-f9dd-46b3-9c27-66a860a6ad15">
    <con:settings/>
    <con:config>
      <script>import java.io.File
import java.time.Duration
import java.text.SimpleDateFormat
import java.util.concurrent.TimeUnit
import java.awt.Robot
import java.awt.event.KeyEvent

import org.apache.commons.io.FileUtils

import org.openqa.selenium.firefox.ProfilesIni
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.firefox.FirefoxProfile
import org.openqa.selenium.firefox.FirefoxOptions
import org.openqa.selenium.WebDriver
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions
import org.openqa.selenium.WebElement
import org.openqa.selenium.By
import org.openqa.selenium.OutputType
import org.openqa.selenium.TakesScreenshot

import org.openqa.selenium.Dimension
import org.openqa.selenium.Point
import org.openqa.selenium.support.ui.FluentWait
import com.eviware.soapui.support.GroovyUtils
import java.awt.Toolkit

/* ---------- MAIN CODE ---------- */

//declare date-time property to be used to create all screenshots under a single directory
String dateTime = currentDateTime()

//declare prodile and set up browser options
ProfilesIni profile = new ProfilesIni()
FirefoxProfile myProfile = profile.getProfile("selenium")
FirefoxOptions options = new FirefoxOptions()
options.setProfile(myProfile)

//declare web driver
WebDriver driver = new FirefoxDriver(options)

//set the browser window size
driver.manage().window().setSize(new Dimension(1920, 1080))

//get the screen dimensions to center the window
Toolkit toolkit = Toolkit.getDefaultToolkit()
int screenWidth = toolkit.getScreenSize().width
int screenHeight = toolkit.getScreenSize().height

//calculate the top-left corner position for centering the window
int x = (screenWidth - 1920) / 2
int y = (screenHeight - 1080) / 2

//set the browser window position
driver.manage().window().setPosition(new Point(x, y))

//set the waitting times
driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS)
driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS)
def wait = new WebDriverWait(driver, Duration.ofSeconds(60)) 
def fluentWait = new FluentWait&lt;>(driver)
        .withTimeout(Duration.ofSeconds(90))
        .pollingEvery(Duration.ofMillis(500))
        .ignoring(NoSuchElementException.class)

//declare variable for filter time window
String timeValue = "90"

//declare string variables for the expected values
String expectedIndex = context.expand('${#TestCase#expectedIndex}') 
String expectedActingUser = "edrqa4b"
String expectedAction = "export"
String expectedApplicationName = "VCPort"
String expectedDescription = "Vehicle configuration history export"
String expectedEventId = "3,030,001"
String expectedEventType = context.expand('${#TestCase#expectedEventType}') 
String expectedLoggedInUser = "edrqa4b"
String expectedResult = "failed"

String url = context.expand('${#TestCase#url}')
			.replace("timeValue", timeValue)
			.replace("indexValue", expectedIndex)
			.replace("actingUserValue", expectedActingUser)
			.replace("actionValue", expectedAction)
			.replace("applicationNameValue", expectedApplicationName)
			.replace("descriptionValue", expectedDescription.replace(" ", "%20"))
			.replace("eventIdValue", expectedEventId.replace(",", ""))
			.replace("eventTypeValue", expectedEventType)
			.replace("loggedInUserValue", expectedLoggedInUser)
			.replace("resultValue", expectedResult)
				
//declare locators for the UI elements
By continueButton = By.id("kc-login")
By dropDown = By.xpath("//div[@class='ng-value-container']")
By option = By.xpath("//span[text()='public']")
By proceedButton = By.xpath("//button[normalize-space()='Proceed']")
By kibanaIcon = By.xpath("//i[@class='fas fa-chart-bar']")
By firstExpandButton = By.xpath("//tbody/tr[1]/td[1]/button[1]/span[1]/span[1]")
By secondExpandButton = By.xpath("//tbody/tr[3]/td[1]/button[1]/span[1]/span[1]")
By thirdExpandButton = By.xpath("//tbody/tr[5]/td[1]/button[1]/span[1]/span[1]")
By singleDocumentLink = By.xpath("//a[normalize-space()='View single document']")
By tableTab = By.xpath("//span[normalize-space()='Table']")
By indexValue = By.xpath("//div[@data-test-subj='tableDocViewRow-_index-value']")
By actingUserValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.actingUser-value']")
By actionValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.action-value']")
By applicationNameValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.applicationName-value']")
By descriptionValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.description-value']")
By eventIdValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.eventId-value']")
By eventTypeValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.eventType-value']")
By loggedInUserValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.loggedInUser-value']")
By resultValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.result-value']")

//Action - Open the OruNext web application
try {
	driver.get("https://demo.orunext.com/")
	//this first ESC press does not take place. The second one does. I don't know why for now.
	//pressEsc()
	wait.until(ExpectedConditions.presenceOfElementLocated(continueButton))
	log.info("[Action] [Passed] Open the OruNext web application")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Open the OruNext web application | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Continue button
try {
	driver.findElement(continueButton).click()
	//pressEsc()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(dropDown)))
	log.info("[Action] [Passed] Click the Continue button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Continue button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Choose tenant from dropdown
try {
	driver.findElement(dropDown).click()
	driver.findElement(option).click()
	driver.findElement(proceedButton).click()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(kibanaIcon)))
	log.info("[Action] [Passed] Action - Choose tenant from dropdown")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Action - Choose tenant from dropdown | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Open the Kibana web application
try {
	driver.get(url)
	pressEsc()
	wait.until(ExpectedConditions.presenceOfElementLocated(firstExpandButton))
	log.info("[Action] [Passed] Open the Kibana web application")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Open the Kibana web application | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the first Expand button
try {
	driver.findElement(firstExpandButton).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(singleDocumentLink))
	log.info("[Action] [Passed] Click the first Expand button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the first Expand button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the first Single Document link
try {
	driver.findElement(singleDocumentLink).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(tableTab))
	log.info("[Action] [Passed] Click the first Single Document link")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the first Single Document link | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Validate the first Single Document Values
try {
	assert driver.findElement(indexValue).getText() == expectedIndex
	assert driver.findElement(actingUserValue).getText() == expectedActingUser
	assert driver.findElement(actionValue).getText() == expectedAction
	assert driver.findElement(applicationNameValue).getText() == expectedApplicationName
	assert driver.findElement(descriptionValue).getText() == expectedDescription
	assert driver.findElement(eventIdValue).getText() == expectedEventId
	assert driver.findElement(eventTypeValue).getText() == expectedEventType
	assert driver.findElement(loggedInUserValue).getText() == expectedLoggedInUser
	assert driver.findElement(resultValue).getText() == expectedResult

	log.info("[Action] [Completed] Validate the first Single Document Values")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Validate the first Single Document Values | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Go back
try {
	driver.navigate().back();
	wait.until(ExpectedConditions.presenceOfElementLocated(secondExpandButton))
	log.info("[Action] [Passed] Go back")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Go back | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the second Expand button
try {
	driver.findElement(secondExpandButton).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(singleDocumentLink))
	log.info("[Action] [Passed] Click the second Expand button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the second Expand button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the second Single Document link
try {
	driver.findElement(singleDocumentLink).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(tableTab))
	log.info("[Action] [Passed] Click the second Single Document link")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the second Single Document link | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Validate the second Single Document Values
try {
	assert driver.findElement(indexValue).getText() == expectedIndex
	assert driver.findElement(actingUserValue).getText() == expectedActingUser
	assert driver.findElement(actionValue).getText() == expectedAction
	assert driver.findElement(applicationNameValue).getText() == expectedApplicationName
	assert driver.findElement(descriptionValue).getText() == expectedDescription
	assert driver.findElement(eventIdValue).getText() == expectedEventId
	assert driver.findElement(eventTypeValue).getText() == expectedEventType
	assert driver.findElement(loggedInUserValue).getText() == expectedLoggedInUser
	assert driver.findElement(resultValue).getText() == expectedResult

	log.info("[Action] [Completed] Validate the second Single Document Values")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Validate the second Single Document Values | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Go back
try {
	driver.navigate().back();
	wait.until(ExpectedConditions.presenceOfElementLocated(secondExpandButton))
	log.info("[Action] [Passed] Go back")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Go back | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the third Expand button
try {
	driver.findElement(thirdExpandButton).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(singleDocumentLink))
	log.info("[Action] [Passed] Click the third Expand button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the third Expand button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the third Single Document link
try {
	driver.findElement(singleDocumentLink).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(tableTab))
	log.info("[Action] [Passed] Click the third Single Document link")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the third Single Document link | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Validate the third Single Document Values
try {
	assert driver.findElement(indexValue).getText() == expectedIndex
	assert driver.findElement(actingUserValue).getText() == expectedActingUser
	assert driver.findElement(actionValue).getText() == expectedAction
	assert driver.findElement(applicationNameValue).getText() == expectedApplicationName
	assert driver.findElement(descriptionValue).getText() == expectedDescription
	assert driver.findElement(eventIdValue).getText() == expectedEventId
	assert driver.findElement(eventTypeValue).getText() == expectedEventType
	assert driver.findElement(loggedInUserValue).getText() == expectedLoggedInUser
	assert driver.findElement(resultValue).getText() == expectedResult

	log.info("[Action] [Completed] Validate the third Single Document Values")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Validate the third Single Document Values | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Close the browser
log.info("[Action] Close the browser")
driver.quit();

/* ---------- CUSTOM METHODS ---------- */

//method to press ESC
public void pressEsc() {
	Robot robot = new Robot()
	robot.delay(2500)
	robot.keyPress(KeyEvent.VK_ESCAPE)
	robot.keyRelease(KeyEvent.VK_ESCAPE)
}

//method to return current date-time
public String currentDateTime() {
	return new SimpleDateFormat("ddMMyyyyHHmmss").format(new Date()).toString()
}

//method to format a string to match the ReadyAPI directory naming convention
public String formattedString(String string) {
	return string
	.replaceAll(" ", "-").replaceAll("%", "%25").replaceAll("\\{", "%7B").replaceAll("\\}", "%7D").replaceAll("\\[", "%5B")
	.replaceAll("\\]", "%5D").replaceAll("\\(", "%28").replaceAll("\\)", "%29").replaceAll("/", "%2F").replaceAll("\\\\", "%5C")
	.replaceAll("\\+", "%2B").replaceAll("\\*", "%2A").replaceAll("\\^", "%5E").replaceAll("~", "%7E").replaceAll("=", "%3D")
	.replaceAll(">", "%3E").replaceAll("&lt;", "%3C").replaceAll("!", "%21").replaceAll("\\?", "%3F").replaceAll("@", "%40")
	.replaceAll("#", "%23").replaceAll("\\\$", "%24").replaceAll("&amp;", "%26").replaceAll("\\|", "%7C").replaceAll(";", "%3B")
	.replaceAll(":", "%3A").replaceAll("'", "%27").replaceAll("\"", "%22").replaceAll("`", "%60").replaceAll(",", "%2C")
}

//method to take a screenshot
public void takeScreenshot(WebDriver  webDriver,  String dateTime) throws Exception {
	Thread.sleep(1000) 
	TakesScreenshot screenshot  = ((TakesScreenshot) webDriver)
	File screenshotFile = screenshot.getScreenshotAs(OutputType.FILE)
	String path = new GroovyUtils(context).getProjectPath() +
						"\\Screenshots\\" +  
						context.expand('${#TestSuite#testSet}')  + "\\" +
						context.expand('${#TestCase#test}')  + "\\" + 
						formattedString(testRunner.testCase.getTestStepAt(context.getCurrentStepIndex()).name) +
						"\\Screenshots_" + dateTime + "\\Screenshot_" + currentDateTime() + ".png"
	File destinationFile = new File(path)
	FileUtils.copyFile(screenshotFile, destinationFile)
}

//method to take a screenshot and close the browser
public void takeScreenshotAndCloseBrowser(WebDriver  webDriver,  String dateTime) {
	takeScreenshot(webDriver, dateTime)
	log.info("Closing the browser in response to failure")
	webDriver.quit()
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="manualTestStep" name="Pause [3]" id="3828b386-1ebc-43f3-80df-166b2fb54730" disabled="true">
    <con:settings/>
    <con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
  </con:testStep>
  <con:testStep type="groovy" name="[A_3] [APS] Download Vehicle Configuration Without Configuration History" id="1a314894-808e-4d77-b069-a0eff8bfb7e6">
    <con:settings/>
    <con:config>
      <script>import java.io.File
import java.time.Duration
import java.text.SimpleDateFormat
import java.util.concurrent.TimeUnit
import java.awt.Robot
import java.awt.event.KeyEvent

import org.apache.commons.io.FileUtils

import org.openqa.selenium.firefox.ProfilesIni
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.firefox.FirefoxProfile
import org.openqa.selenium.firefox.FirefoxOptions
import org.openqa.selenium.WebDriver
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions
import org.openqa.selenium.WebElement
import org.openqa.selenium.By
import org.openqa.selenium.OutputType
import org.openqa.selenium.TakesScreenshot

import org.openqa.selenium.Dimension
import org.openqa.selenium.Point
import org.openqa.selenium.support.ui.FluentWait
import com.eviware.soapui.support.GroovyUtils
import java.awt.Toolkit

/* ---------- MAIN CODE ---------- */

//declare date-time property to be used to create all screenshots under a single directory
String dateTime = currentDateTime()

//declare prodile and set up browser options
ProfilesIni profile = new ProfilesIni()
FirefoxProfile myProfile = profile.getProfile("selenium")
FirefoxOptions options = new FirefoxOptions()
options.setProfile(myProfile)

//declare web driver
WebDriver driver = new FirefoxDriver(options)

//set the browser window size
driver.manage().window().setSize(new Dimension(1920, 1080))

//get the screen dimensions to center the window
Toolkit toolkit = Toolkit.getDefaultToolkit()
int screenWidth = toolkit.getScreenSize().width
int screenHeight = toolkit.getScreenSize().height

//calculate the top-left corner position for centering the window
int x = (screenWidth - 1920) / 2
int y = (screenHeight - 1080) / 2

//set the browser window position
driver.manage().window().setPosition(new Point(x, y))

//set the waitting times
driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS)
driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS)
def wait = new WebDriverWait(driver, Duration.ofSeconds(60)) 
def fluentWait = new FluentWait&lt;>(driver)
        .withTimeout(Duration.ofSeconds(90))
        .pollingEvery(Duration.ofMillis(500))
        .ignoring(NoSuchElementException.class)

//declare locators for the UI elements
By continueButton = By.id("kc-login")
By dropDown = By.xpath("//div[@class='ng-value-container']")
By option = By.xpath("//span[text()='public']")
By proceedButton = By.xpath("//button[normalize-space()='Proceed']")
By vehicleConfigurationPanel = By.id("vehicle_configurations_main")
By searchBox = By.xpath("//textarea[@placeholder='Enter VIN(s) to search for']")
By searchButton = By.xpath("//button[normalize-space()='Search']")
String vin = context.expand('${#TestCase#vin}') 
By vinEntry = By.xpath("//a[normalize-space()='" + vin + "']")
By downloadButton = By.xpath("//i[@class='fa fa-download']")
By okButton = By.xpath("//button[normalize-space()='OK']")

//Action - Open the OruNext web application
try {
	driver.get("https://demo.orunext.com/")
	//this first ESC press does not take place. The second one does. I don't know why for now.
	//pressEsc()
	wait.until(ExpectedConditions.presenceOfElementLocated(continueButton))
	log.info("[Action] [Passed] Open the OruNext web application")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Open the OruNext web application | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Continue button
try {
	driver.findElement(continueButton).click()
	//pressEsc()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(dropDown)))
	log.info("[Action] [Passed] Click the Continue button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Continue button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Choose tenant from dropdown
try {
	driver.findElement(dropDown).click()
	driver.findElement(option).click()
	driver.findElement(proceedButton).click()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(vehicleConfigurationPanel)))
	log.info("[Action] [Passed] Action - Choose tenant from dropdown")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Action - Choose tenant from dropdown | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Vehicle Configuration panel
try {
	driver.findElement(vehicleConfigurationPanel).click()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(searchButton)))
	log.info("[Action] [Passed] Click the Vehicle Configuration panel")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Vehicle Configuration panel | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Enter the VIN value in the search box
try {
	driver.findElement(searchBox).sendKeys(vin)
	log.info("[Action] [Passed] Enter the VIN value in the search box")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Enter the VIN value in the search box | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Search button
try {
	driver.findElement(searchButton).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(vinEntry))
	log.info("[Action] [Passed] Click the Search button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Search button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Download button
try {
	driver.findElement(downloadButton).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(okButton))
	log.info("[Action] [Passed] Click the Download button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Download button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the OK button
try {
	driver.findElement(okButton).click()
	log.info("[Action] [Passed] Click the OK button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the OK button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Close the browser
log.info("[Action] Close the browser")
driver.quit();

/* ---------- CUSTOM METHODS ---------- */

//method to press ESC
public void pressEsc() {
	Robot robot = new Robot()
	robot.delay(2500)
	robot.keyPress(KeyEvent.VK_ESCAPE)
	robot.keyRelease(KeyEvent.VK_ESCAPE)
}

//method to return current date-time
public String currentDateTime() {
	return new SimpleDateFormat("ddMMyyyyHHmmss").format(new Date()).toString()
}

//method to format a string to match the ReadyAPI directory naming convention
public String formattedString(String string) {
	return string
	.replaceAll(" ", "-").replaceAll("%", "%25").replaceAll("\\{", "%7B").replaceAll("\\}", "%7D").replaceAll("\\[", "%5B")
	.replaceAll("\\]", "%5D").replaceAll("\\(", "%28").replaceAll("\\)", "%29").replaceAll("/", "%2F").replaceAll("\\\\", "%5C")
	.replaceAll("\\+", "%2B").replaceAll("\\*", "%2A").replaceAll("\\^", "%5E").replaceAll("~", "%7E").replaceAll("=", "%3D")
	.replaceAll(">", "%3E").replaceAll("&lt;", "%3C").replaceAll("!", "%21").replaceAll("\\?", "%3F").replaceAll("@", "%40")
	.replaceAll("#", "%23").replaceAll("\\\$", "%24").replaceAll("&amp;", "%26").replaceAll("\\|", "%7C").replaceAll(";", "%3B")
	.replaceAll(":", "%3A").replaceAll("'", "%27").replaceAll("\"", "%22").replaceAll("`", "%60").replaceAll(",", "%2C")
}

//method to take a screenshot
public void takeScreenshot(WebDriver  webDriver,  String dateTime) throws Exception {
	Thread.sleep(1000) 
	TakesScreenshot screenshot  = ((TakesScreenshot) webDriver)
	File screenshotFile = screenshot.getScreenshotAs(OutputType.FILE)
	String path = new GroovyUtils(context).getProjectPath() +
						"\\Screenshots\\" +  
						context.expand('${#TestSuite#testSet}')  + "\\" +
						context.expand('${#TestCase#test}')  + "\\" + 
						formattedString(testRunner.testCase.getTestStepAt(context.getCurrentStepIndex()).name) +
						"\\Screenshots_" + dateTime + "\\Screenshot_" + currentDateTime() + ".png"
	File destinationFile = new File(path)
	FileUtils.copyFile(screenshotFile, destinationFile)
}

//method to take a screenshot and close the browser
public void takeScreenshotAndCloseBrowser(WebDriver  webDriver,  String dateTime) {
	takeScreenshot(webDriver, dateTime)
	log.info("Closing the browser in response to failure")
	webDriver.quit()
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="delay" name="[Delay] [3] 30 Seconds" id="95f96bbd-5a4f-4ce4-9b81-85ff6e68f19d">
    <con:settings/>
    <con:config>
      <delay>30000</delay>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="[E_3] [APS] Check That Logs Have Been Generated" id="5d92249b-aa4f-463e-b4f6-3192a3677d9f">
    <con:settings/>
    <con:config>
      <script>import java.io.File
import java.time.Duration
import java.text.SimpleDateFormat
import java.util.concurrent.TimeUnit
import java.awt.Robot
import java.awt.event.KeyEvent

import org.apache.commons.io.FileUtils

import org.openqa.selenium.firefox.ProfilesIni
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.firefox.FirefoxProfile
import org.openqa.selenium.firefox.FirefoxOptions
import org.openqa.selenium.WebDriver
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions
import org.openqa.selenium.WebElement
import org.openqa.selenium.By
import org.openqa.selenium.OutputType
import org.openqa.selenium.TakesScreenshot

import org.openqa.selenium.Dimension
import org.openqa.selenium.Point
import org.openqa.selenium.support.ui.FluentWait
import com.eviware.soapui.support.GroovyUtils
import java.awt.Toolkit

/* ---------- MAIN CODE ---------- */

//declare date-time property to be used to create all screenshots under a single directory
String dateTime = currentDateTime()

//declare prodile and set up browser options
ProfilesIni profile = new ProfilesIni()
FirefoxProfile myProfile = profile.getProfile("selenium")
FirefoxOptions options = new FirefoxOptions()
options.setProfile(myProfile)

//declare web driver
WebDriver driver = new FirefoxDriver(options)

//set the browser window size
driver.manage().window().setSize(new Dimension(1920, 1080))

//get the screen dimensions to center the window
Toolkit toolkit = Toolkit.getDefaultToolkit()
int screenWidth = toolkit.getScreenSize().width
int screenHeight = toolkit.getScreenSize().height

//calculate the top-left corner position for centering the window
int x = (screenWidth - 1920) / 2
int y = (screenHeight - 1080) / 2

//set the browser window position
driver.manage().window().setPosition(new Point(x, y))

//set the waitting times
driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS)
driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS)
def wait = new WebDriverWait(driver, Duration.ofSeconds(60)) 
def fluentWait = new FluentWait&lt;>(driver)
        .withTimeout(Duration.ofSeconds(90))
        .pollingEvery(Duration.ofMillis(500))
        .ignoring(NoSuchElementException.class)

//declare variable for filter time window
String timeValue = "90"

//declare string variables for the expected values
String expectedIndex = context.expand('${#TestCase#expectedIndex}') 
String expectedActingUser = "edrqa4b"
String expectedAction = "export"
String expectedApplicationName = "VCPort"
String expectedDescription = "Vehicle configuration history export"
String expectedEventId = "3,030,002"
String expectedEventType = context.expand('${#TestCase#expectedEventType}') 
String expectedLoggedInUser = "edrqa4b"
String expectedResult = "successful"

String url = context.expand('${#TestCase#url}')
			.replace("timeValue", timeValue)
			.replace("indexValue", expectedIndex)
			.replace("actingUserValue", expectedActingUser)
			.replace("actionValue", expectedAction)
			.replace("applicationNameValue", expectedApplicationName)
			.replace("descriptionValue", expectedDescription.replace(" ", "%20"))
			.replace("eventIdValue", expectedEventId.replace(",", ""))
			.replace("eventTypeValue", expectedEventType)
			.replace("loggedInUserValue", expectedLoggedInUser)
			.replace("resultValue", expectedResult)

//declare locators for the UI elements
By continueButton = By.id("kc-login")
By dropDown = By.xpath("//div[@class='ng-value-container']")
By option = By.xpath("//span[text()='public']")
By proceedButton = By.xpath("//button[normalize-space()='Proceed']")
By kibanaIcon = By.xpath("//i[@class='fas fa-chart-bar']")
By expandButton = By.xpath("//button[@aria-label='Toggle row details']//span[@class='euiButtonContent euiButtonEmpty__content']")
By singleDocumentLink = By.xpath("//a[normalize-space()='View single document']")
By tableTab = By.xpath("//span[normalize-space()='Table']")
By indexValue = By.xpath("//div[@data-test-subj='tableDocViewRow-_index-value']")
By actingUserValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.actingUser-value']")
By actionValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.action-value']")
By applicationNameValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.applicationName-value']")
By descriptionValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.description-value']")
By eventIdValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.eventId-value']")
By eventTypeValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.eventType-value']")
By loggedInUserValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.loggedInUser-value']")
By resultValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.result-value']")

//Action - Open the OruNext web application
try {
	driver.get("https://demo.orunext.com/")
	//this first ESC press does not take place. The second one does. I don't know why for now.
	//pressEsc()
	wait.until(ExpectedConditions.presenceOfElementLocated(continueButton))
	log.info("[Action] [Passed] Open the OruNext web application")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Open the OruNext web application | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Continue button
try {
	driver.findElement(continueButton).click()
	//pressEsc()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(dropDown)))
	log.info("[Action] [Passed] Click the Continue button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Continue button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Choose tenant from dropdown
try {
	driver.findElement(dropDown).click()
	driver.findElement(option).click()
	driver.findElement(proceedButton).click()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(kibanaIcon)))
	log.info("[Action] [Passed] Action - Choose tenant from dropdown")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Action - Choose tenant from dropdown | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Open the Kibana web application
try {
	driver.get(url)
	wait.until(ExpectedConditions.presenceOfElementLocated(expandButton))
	log.info("[Action] [Passed] Open the Kibana web application")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Open the Kibana web application | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Expand button
try {
	driver.findElement(expandButton).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(singleDocumentLink))
	log.info("[Action] [Passed] Click the Expand button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Expand button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Single Document  link
try {
	driver.findElement(singleDocumentLink).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(tableTab))
	log.info("[Action] [Passed] Click the Single Document link")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Single Document link | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Validate the Single Document Values
try {
	assert driver.findElement(indexValue).getText() == expectedIndex
	assert driver.findElement(actingUserValue).getText() == expectedActingUser
	assert driver.findElement(actionValue).getText() == expectedAction
	assert driver.findElement(applicationNameValue).getText() == expectedApplicationName
	assert driver.findElement(descriptionValue).getText() == expectedDescription
	assert driver.findElement(eventIdValue).getText() == expectedEventId
	assert driver.findElement(eventTypeValue).getText() == expectedEventType
	assert driver.findElement(loggedInUserValue).getText() == expectedLoggedInUser
	assert driver.findElement(resultValue).getText() == expectedResult

	log.info("[Action] [Completed] Validate the Single Document Values")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Validate the Single Document Values | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Close the browser
log.info("[Action] Close the browser")
driver.quit();

/* ---------- CUSTOM METHODS ---------- */

//method to press ESC
public void pressEsc() {
	Robot robot = new Robot()
	robot.delay(2500)
	robot.keyPress(KeyEvent.VK_ESCAPE)
	robot.keyRelease(KeyEvent.VK_ESCAPE)
}

//method to return current date-time
public String currentDateTime() {
	return new SimpleDateFormat("ddMMyyyyHHmmss").format(new Date()).toString()
}

//method to format a string to match the ReadyAPI directory naming convention
public String formattedString(String string) {
	return string
	.replaceAll(" ", "-").replaceAll("%", "%25").replaceAll("\\{", "%7B").replaceAll("\\}", "%7D").replaceAll("\\[", "%5B")
	.replaceAll("\\]", "%5D").replaceAll("\\(", "%28").replaceAll("\\)", "%29").replaceAll("/", "%2F").replaceAll("\\\\", "%5C")
	.replaceAll("\\+", "%2B").replaceAll("\\*", "%2A").replaceAll("\\^", "%5E").replaceAll("~", "%7E").replaceAll("=", "%3D")
	.replaceAll(">", "%3E").replaceAll("&lt;", "%3C").replaceAll("!", "%21").replaceAll("\\?", "%3F").replaceAll("@", "%40")
	.replaceAll("#", "%23").replaceAll("\\\$", "%24").replaceAll("&amp;", "%26").replaceAll("\\|", "%7C").replaceAll(";", "%3B")
	.replaceAll(":", "%3A").replaceAll("'", "%27").replaceAll("\"", "%22").replaceAll("`", "%60").replaceAll(",", "%2C")
}

//method to take a screenshot
public void takeScreenshot(WebDriver  webDriver,  String dateTime) throws Exception {
	Thread.sleep(1000) 
	TakesScreenshot screenshot  = ((TakesScreenshot) webDriver)
	File screenshotFile = screenshot.getScreenshotAs(OutputType.FILE)
	String path = new GroovyUtils(context).getProjectPath() +
						"\\Screenshots\\" +  
						context.expand('${#TestSuite#testSet}')  + "\\" +
						context.expand('${#TestCase#test}')  + "\\" + 
						formattedString(testRunner.testCase.getTestStepAt(context.getCurrentStepIndex()).name) +
						"\\Screenshots_" + dateTime + "\\Screenshot_" + currentDateTime() + ".png"
	File destinationFile = new File(path)
	FileUtils.copyFile(screenshotFile, destinationFile)
}

//method to take a screenshot and close the browser
public void takeScreenshotAndCloseBrowser(WebDriver  webDriver,  String dateTime) {
	takeScreenshot(webDriver, dateTime)
	log.info("Closing the browser in response to failure")
	webDriver.quit()
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="manualTestStep" name="Pause [4]" id="fe0b5629-989b-4270-8045-ac45e6561f00" disabled="true">
    <con:settings/>
    <con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
  </con:testStep>
  <con:testStep type="restrequest" name="[A_4] [APS] [1] Fail To Download Vehicle Configuration Without Configuration History" id="70c36ef4-5657-4af0-a1e9-9ec3dea47bfd">
    <con:settings/>
    <con:config service="ESR Labs ORU App - Vehicle Configuration" resourcePath="/api/oru/vehicle_configurations/configurations/download" methodName="downloadVehicleConfigurations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="[A_4] [APS] [1] Fail To Download Vehicle Configuration Without Configuration History" id="23e8cec8-35be-46dc-a34f-62b7b16fb75c" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="Authorization" value="Bearer ${#TestCase#accessToken}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>https://demo.orunext.com</con:endpoint>
        <con:request>["AMV0"]</con:request>
        <con:originalUri>https://demo.orunext.com/api/oru/vehicle_configurations/configurations/download</con:originalUri>
        <con:assertion type="DataAndMetadataAssertion" name="Status Line is equal to &quot;HTTP/1.1 400 Bad Request&quot;" id="c328cfc5-8350-435b-9c97-5633d4862c3f">
          <con:configuration xsi:type="con:DataAndMetadataAssertion">
            <con:mode>Received Metadata</con:mode>
            <con:elements>
              <con:path>$['Headers']['date']</con:path>
              <con:element>date</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Thu, 29 Feb 2024 11:58:23 GMT</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['expires']</con:path>
              <con:element>expires</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['transfer-encoding']</con:path>
              <con:element>transfer-encoding</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>chunked</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-content-type-options']</con:path>
              <con:element>x-content-type-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>nosniff</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-xss-protection']</con:path>
              <con:element>x-xss-protection</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-frame-options']</con:path>
              <con:element>x-frame-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>DENY</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-type']</con:path>
              <con:element>content-type</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>application/json</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['#status#']</con:path>
              <con:element>#status#</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>true</con:enabled>
              <con:expectedValue>HTTP/1.1 400 Bad Request</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['cache-control']</con:path>
              <con:element>cache-control</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache, no-store, max-age=0, must-revalidate</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['strict-transport-security']</con:path>
              <con:element>strict-transport-security</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>max-age=31536000 ; includeSubDomains</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['pragma']</con:path>
              <con:element>pragma</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:originalMessage>{"Headers":{"date":"Thu, 29 Feb 2024 11:58:23 GMT","expires":"0","transfer-encoding":"chunked","x-content-type-options":"nosniff","x-xss-protection":"0","x-frame-options":"DENY","content-type":"application/json","#status#":"HTTP/1.1 404 Not Found","cache-control":"no-cache, no-store, max-age=0, must-revalidate","strict-transport-security":"max-age=31536000 ; includeSubDomains","pragma":"no-cache"}}</con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:assertion type="DataAndMetadataAssertion" name="Content-Type is equal to &quot;application/json&quot;" id="1ef0ad57-3d4f-4ff2-8d01-705aff93adad">
          <con:configuration xsi:type="con:DataAndMetadataAssertion">
            <con:mode>Received Metadata</con:mode>
            <con:elements>
              <con:path>$['Headers']['date']</con:path>
              <con:element>date</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Thu, 29 Feb 2024 11:58:23 GMT</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['expires']</con:path>
              <con:element>expires</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['transfer-encoding']</con:path>
              <con:element>transfer-encoding</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>chunked</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-content-type-options']</con:path>
              <con:element>x-content-type-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>nosniff</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-xss-protection']</con:path>
              <con:element>x-xss-protection</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-frame-options']</con:path>
              <con:element>x-frame-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>DENY</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-type']</con:path>
              <con:element>content-type</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>true</con:enabled>
              <con:expectedValue>application/json</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['#status#']</con:path>
              <con:element>#status#</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>HTTP/1.1 404 Not Found</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['cache-control']</con:path>
              <con:element>cache-control</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache, no-store, max-age=0, must-revalidate</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['strict-transport-security']</con:path>
              <con:element>strict-transport-security</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>max-age=31536000 ; includeSubDomains</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['pragma']</con:path>
              <con:element>pragma</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:originalMessage>{"Headers":{"date":"Thu, 29 Feb 2024 11:58:23 GMT","expires":"0","transfer-encoding":"chunked","x-content-type-options":"nosniff","x-xss-protection":"0","x-frame-options":"DENY","content-type":"application/json","#status#":"HTTP/1.1 404 Not Found","cache-control":"no-cache, no-store, max-age=0, must-revalidate","strict-transport-security":"max-age=31536000 ; includeSubDomains","pragma":"no-cache"}}</con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[status] is equal to &quot;400&quot;" id="ebd5ca09-3c9a-45b3-ba76-193b2733bc4b">
          <con:configuration>
            <path>$['status']</path>
            <content>400</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[error] is equal to &quot;Bad Request&quot;" id="5d1ae576-d7e4-4bf6-becc-285bb85b7bfa">
          <con:configuration>
            <path>$['error']</path>
            <content>"Bad Request"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[message] is equal to&quot;Invalid format&quot;" id="98c18aa9-f541-4252-9fb2-d33e4ca36324">
          <con:configuration>
            <path>$['message']</path>
            <content>"Invalid JSON format"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" name="[ref] exists" id="a26271ef-c7ce-40be-9842-6b2aad35978e">
          <con:configuration>
            <path>$['ref']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[path] is equal to &quot;/vehicle_configurations/configurations/download&quot;" id="09d03fc7-826c-48a0-aa6e-9d92451f9602">
          <con:configuration>
            <path>$['path']</path>
            <content>"/vehicle_configurations/configurations/download"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" name="[timestamp] contains the current date" id="488e22f6-e9de-4394-9565-2bff419effb3">
          <con:configuration>
            <scriptText>import java.text.SimpleDateFormat
import groovy.json.JsonSlurper

//get the JSON response body of the API response for the current test step
def jsonResponse = new JsonSlurper().parseText(messageExchange.response.responseContent)

//declare variables for the value of the [timestamp] key
String timestamp = jsonResponse.timestamp
//declare variables for the current date
String currentDate = new SimpleDateFormat("yyyy-MM-dd").format(new Date()).toString()

//assert that [timestamp] contains the current date
assert timestamp.contains(currentDate)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="includeHistory" value="false"/>
          <con:entry key="includeMoseSignatures" value="false"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>includeHistory</con:entry>
          <con:entry>includeMoseSignatures</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="4f515789-2a71-4da6-9bbc-0aff4cd795fa">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="9ba48164-5af1-48d4-aa59-9d1e85e3e71a">
            <con:authProfile>ORU-live</con:authProfile>
          </con:entry>
          <con:entry environmentId="7b56b5f6-5164-4fbf-8821-ef5b0d3790b7">
            <con:authProfile>ORU-app</con:authProfile>
          </con:entry>
          <con:entry environmentId="19d15dbe-9720-4a73-b417-71308b8db01e">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="[A_4] [APS] [2] Fail To Download Vehicle Configuration Without Configuration History" id="fec6df30-7e1f-480c-9454-9f01201f260d">
    <con:settings/>
    <con:config service="ESR Labs ORU App - Vehicle Configuration" resourcePath="/api/oru/vehicle_configurations/configurations/download" methodName="downloadVehicleConfigurations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="[A_4] [APS] [2] Fail To Download Vehicle Configuration Without Configuration History" id="23e8cec8-35be-46dc-a34f-62b7b16fb75c" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="Authorization" value="Bearer ${#TestCase#accessToken}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>https://demo.orunext.com</con:endpoint>
        <con:request>["${[Pre-Condition] [OTA-2661] [2] Vehicle is created#RawRequest#$['vin']}"]</con:request>
        <con:originalUri>https://demo.orunext.com/api/oru/vehicle_configurations/configurations/download</con:originalUri>
        <con:assertion type="DataAndMetadataAssertion" name="Status Line is equal to &quot;HTTP/1.1 400 Bad Request&quot;" id="c328cfc5-8350-435b-9c97-5633d4862c3f">
          <con:configuration xsi:type="con:DataAndMetadataAssertion">
            <con:mode>Received Metadata</con:mode>
            <con:elements>
              <con:path>$['Headers']['date']</con:path>
              <con:element>date</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Thu, 29 Feb 2024 11:58:23 GMT</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['expires']</con:path>
              <con:element>expires</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['transfer-encoding']</con:path>
              <con:element>transfer-encoding</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>chunked</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-content-type-options']</con:path>
              <con:element>x-content-type-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>nosniff</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-xss-protection']</con:path>
              <con:element>x-xss-protection</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-frame-options']</con:path>
              <con:element>x-frame-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>DENY</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-type']</con:path>
              <con:element>content-type</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>application/json</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['#status#']</con:path>
              <con:element>#status#</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>true</con:enabled>
              <con:expectedValue>HTTP/1.1 400 Bad Request</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['cache-control']</con:path>
              <con:element>cache-control</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache, no-store, max-age=0, must-revalidate</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['strict-transport-security']</con:path>
              <con:element>strict-transport-security</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>max-age=31536000 ; includeSubDomains</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['pragma']</con:path>
              <con:element>pragma</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:originalMessage>{"Headers":{"date":"Thu, 29 Feb 2024 11:58:23 GMT","expires":"0","transfer-encoding":"chunked","x-content-type-options":"nosniff","x-xss-protection":"0","x-frame-options":"DENY","content-type":"application/json","#status#":"HTTP/1.1 404 Not Found","cache-control":"no-cache, no-store, max-age=0, must-revalidate","strict-transport-security":"max-age=31536000 ; includeSubDomains","pragma":"no-cache"}}</con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:assertion type="DataAndMetadataAssertion" name="Content-Type is equal to &quot;application/json&quot;" id="1ef0ad57-3d4f-4ff2-8d01-705aff93adad">
          <con:configuration xsi:type="con:DataAndMetadataAssertion">
            <con:mode>Received Metadata</con:mode>
            <con:elements>
              <con:path>$['Headers']['date']</con:path>
              <con:element>date</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Thu, 29 Feb 2024 11:58:23 GMT</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['expires']</con:path>
              <con:element>expires</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['transfer-encoding']</con:path>
              <con:element>transfer-encoding</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>chunked</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-content-type-options']</con:path>
              <con:element>x-content-type-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>nosniff</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-xss-protection']</con:path>
              <con:element>x-xss-protection</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-frame-options']</con:path>
              <con:element>x-frame-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>DENY</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-type']</con:path>
              <con:element>content-type</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>true</con:enabled>
              <con:expectedValue>application/json</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['#status#']</con:path>
              <con:element>#status#</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>HTTP/1.1 404 Not Found</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['cache-control']</con:path>
              <con:element>cache-control</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache, no-store, max-age=0, must-revalidate</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['strict-transport-security']</con:path>
              <con:element>strict-transport-security</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>max-age=31536000 ; includeSubDomains</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['pragma']</con:path>
              <con:element>pragma</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:originalMessage>{"Headers":{"date":"Thu, 29 Feb 2024 11:58:23 GMT","expires":"0","transfer-encoding":"chunked","x-content-type-options":"nosniff","x-xss-protection":"0","x-frame-options":"DENY","content-type":"application/json","#status#":"HTTP/1.1 404 Not Found","cache-control":"no-cache, no-store, max-age=0, must-revalidate","strict-transport-security":"max-age=31536000 ; includeSubDomains","pragma":"no-cache"}}</con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[status] is equal to &quot;400&quot;" id="ebd5ca09-3c9a-45b3-ba76-193b2733bc4b">
          <con:configuration>
            <path>$['status']</path>
            <content>400</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[error] is equal to &quot;Bad Request&quot;" id="5d1ae576-d7e4-4bf6-becc-285bb85b7bfa">
          <con:configuration>
            <path>$['error']</path>
            <content>"Bad Request"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[message] is equal to &quot;Failed to convert value of type 'java.lang.String' to required type 'boolean'; Invalid boolean value []&quot;" id="98c18aa9-f541-4252-9fb2-d33e4ca36324">
          <con:configuration>
            <path>$['message']</path>
            <content>"Failed to convert value of type 'java.lang.String' to required type 'boolean'; Invalid boolean value []"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" name="[ref] exists" id="a26271ef-c7ce-40be-9842-6b2aad35978e">
          <con:configuration>
            <path>$['ref']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[path] is equal to &quot;/vehicle_configurations/configurations/download&quot;" id="09d03fc7-826c-48a0-aa6e-9d92451f9602">
          <con:configuration>
            <path>$['path']</path>
            <content>"/vehicle_configurations/configurations/download"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" name="[timestamp] contains the current date" id="488e22f6-e9de-4394-9565-2bff419effb3">
          <con:configuration>
            <scriptText>import java.text.SimpleDateFormat
import groovy.json.JsonSlurper

//get the JSON response body of the API response for the current test step
def jsonResponse = new JsonSlurper().parseText(messageExchange.response.responseContent)

//declare variables for the value of the [timestamp] key
String timestamp = jsonResponse.timestamp
//declare variables for the current date
String currentDate = new SimpleDateFormat("yyyy-MM-dd").format(new Date()).toString()

//assert that [timestamp] contains the current date
assert timestamp.contains(currentDate)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="includeHistory" value="false"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>includeHistory</con:entry>
          <con:entry>includeMoseSignatures</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="4f515789-2a71-4da6-9bbc-0aff4cd795fa">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="9ba48164-5af1-48d4-aa59-9d1e85e3e71a">
            <con:authProfile>ORU-live</con:authProfile>
          </con:entry>
          <con:entry environmentId="7b56b5f6-5164-4fbf-8821-ef5b0d3790b7">
            <con:authProfile>ORU-app</con:authProfile>
          </con:entry>
          <con:entry environmentId="19d15dbe-9720-4a73-b417-71308b8db01e">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="[A_4] [APS] [3] Fail To Download Vehicle Configuration Without Configuration History" id="ee1b374e-8f54-4a14-ad38-9b1a454d00c9">
    <con:settings/>
    <con:config service="ESR Labs ORU App - Vehicle Configuration" resourcePath="/api/oru/vehicle_configurations/configurations/download" methodName="downloadVehicleConfigurations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="[A_4] [APS] [3] Fail To Download Vehicle Configuration Without Configuration History" id="23e8cec8-35be-46dc-a34f-62b7b16fb75c" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="Authorization" value="Bearer ${#TestCase#accessToken}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>https://demo.orunext.com</con:endpoint>
        <con:request/>
        <con:originalUri>https://demo.orunext.com/api/oru/vehicle_configurations/configurations/download</con:originalUri>
        <con:assertion type="DataAndMetadataAssertion" name="Status Line is equal to &quot;HTTP/1.1 400 Bad Request&quot;" id="9294cc6a-db36-4c53-8444-2453ca048d8b">
          <con:configuration xsi:type="con:DataAndMetadataAssertion">
            <con:mode>Received Metadata</con:mode>
            <con:elements>
              <con:path>$['Headers']['date']</con:path>
              <con:element>date</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Thu, 29 Feb 2024 11:58:23 GMT</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['expires']</con:path>
              <con:element>expires</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['transfer-encoding']</con:path>
              <con:element>transfer-encoding</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>chunked</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-content-type-options']</con:path>
              <con:element>x-content-type-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>nosniff</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-xss-protection']</con:path>
              <con:element>x-xss-protection</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-frame-options']</con:path>
              <con:element>x-frame-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>DENY</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-type']</con:path>
              <con:element>content-type</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>application/json</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['#status#']</con:path>
              <con:element>#status#</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>true</con:enabled>
              <con:expectedValue>HTTP/1.1 400 Bad Request</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['cache-control']</con:path>
              <con:element>cache-control</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache, no-store, max-age=0, must-revalidate</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['strict-transport-security']</con:path>
              <con:element>strict-transport-security</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>max-age=31536000 ; includeSubDomains</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['pragma']</con:path>
              <con:element>pragma</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:originalMessage>{"Headers":{"date":"Thu, 29 Feb 2024 11:58:23 GMT","expires":"0","transfer-encoding":"chunked","x-content-type-options":"nosniff","x-xss-protection":"0","x-frame-options":"DENY","content-type":"application/json","#status#":"HTTP/1.1 404 Not Found","cache-control":"no-cache, no-store, max-age=0, must-revalidate","strict-transport-security":"max-age=31536000 ; includeSubDomains","pragma":"no-cache"}}</con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:assertion type="DataAndMetadataAssertion" name="Content-Type is equal to &quot;application/json&quot;" id="ad6636eb-9b06-4eb7-8aa4-87e4159dc35c">
          <con:configuration xsi:type="con:DataAndMetadataAssertion">
            <con:mode>Received Metadata</con:mode>
            <con:elements>
              <con:path>$['Headers']['date']</con:path>
              <con:element>date</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Thu, 29 Feb 2024 11:58:23 GMT</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['expires']</con:path>
              <con:element>expires</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['transfer-encoding']</con:path>
              <con:element>transfer-encoding</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>chunked</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-content-type-options']</con:path>
              <con:element>x-content-type-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>nosniff</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-xss-protection']</con:path>
              <con:element>x-xss-protection</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-frame-options']</con:path>
              <con:element>x-frame-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>DENY</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-type']</con:path>
              <con:element>content-type</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>true</con:enabled>
              <con:expectedValue>application/json</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['#status#']</con:path>
              <con:element>#status#</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>HTTP/1.1 404 Not Found</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['cache-control']</con:path>
              <con:element>cache-control</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache, no-store, max-age=0, must-revalidate</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['strict-transport-security']</con:path>
              <con:element>strict-transport-security</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>max-age=31536000 ; includeSubDomains</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['pragma']</con:path>
              <con:element>pragma</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:originalMessage>{"Headers":{"date":"Thu, 29 Feb 2024 11:58:23 GMT","expires":"0","transfer-encoding":"chunked","x-content-type-options":"nosniff","x-xss-protection":"0","x-frame-options":"DENY","content-type":"application/json","#status#":"HTTP/1.1 404 Not Found","cache-control":"no-cache, no-store, max-age=0, must-revalidate","strict-transport-security":"max-age=31536000 ; includeSubDomains","pragma":"no-cache"}}</con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[status] is equal to &quot;400&quot;" id="1f725bc9-1e39-4330-9a21-8810c4f57d87">
          <con:configuration>
            <path>$['status']</path>
            <content>400</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[error] is equal to &quot;Bad Request&quot;" id="8469cc8a-3ab1-4540-a466-04e0e266164b">
          <con:configuration>
            <path>$['error']</path>
            <content>"Bad Request"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[message] is equal to&quot;Invalid format&quot;" id="149d44fa-8f62-4766-bb85-ae4a284f4dc2">
          <con:configuration>
            <path>$['message']</path>
            <content>"Invalid format"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" name="[ref] exists" id="141db229-86b0-4f02-93cd-9718e4f787a7">
          <con:configuration>
            <path>$['ref']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[path] is equal to &quot;/vehicle_configurations/configurations/download&quot;" id="97d34fe8-4023-48a9-bccb-cc48563fdb00">
          <con:configuration>
            <path>$['path']</path>
            <content>"/vehicle_configurations/configurations/download"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" name="[timestamp] contains the current date" id="2e64082f-d27a-4cc9-b3c3-d013f9690647">
          <con:configuration>
            <scriptText>import java.text.SimpleDateFormat
import groovy.json.JsonSlurper

//get the JSON response body of the API response for the current test step
def jsonResponse = new JsonSlurper().parseText(messageExchange.response.responseContent)

//declare variables for the value of the [timestamp] key
String timestamp = jsonResponse.timestamp
//declare variables for the current date
String currentDate = new SimpleDateFormat("yyyy-MM-dd").format(new Date()).toString()

//assert that [timestamp] contains the current date
assert timestamp.contains(currentDate)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="includeHistory" value="false"/>
          <con:entry key="includeMoseSignatures" value="false"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>includeHistory</con:entry>
          <con:entry>includeMoseSignatures</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="4f515789-2a71-4da6-9bbc-0aff4cd795fa">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="9ba48164-5af1-48d4-aa59-9d1e85e3e71a">
            <con:authProfile>ORU-live</con:authProfile>
          </con:entry>
          <con:entry environmentId="7b56b5f6-5164-4fbf-8821-ef5b0d3790b7">
            <con:authProfile>ORU-app</con:authProfile>
          </con:entry>
          <con:entry environmentId="19d15dbe-9720-4a73-b417-71308b8db01e">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="delay" name="[Delay] [4] 30 Seconds" id="450eda9d-510c-42cb-987f-01dff6bb05e5">
    <con:settings/>
    <con:config>
      <delay>30000</delay>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="[E_4] [APS] Check That Logs Have Been Generated For The Three Actions" id="cd5e2fe0-9741-4d9f-8d1d-fb983e357c1d">
    <con:settings/>
    <con:config>
      <script>import java.io.File
import java.time.Duration
import java.text.SimpleDateFormat
import java.util.concurrent.TimeUnit
import java.awt.Robot
import java.awt.event.KeyEvent

import org.apache.commons.io.FileUtils

import org.openqa.selenium.firefox.ProfilesIni
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.firefox.FirefoxProfile
import org.openqa.selenium.firefox.FirefoxOptions
import org.openqa.selenium.WebDriver
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions
import org.openqa.selenium.WebElement
import org.openqa.selenium.By
import org.openqa.selenium.OutputType
import org.openqa.selenium.TakesScreenshot

import org.openqa.selenium.Dimension
import org.openqa.selenium.Point
import org.openqa.selenium.support.ui.FluentWait
import com.eviware.soapui.support.GroovyUtils
import java.awt.Toolkit

/* ---------- MAIN CODE ---------- */

//declare date-time property to be used to create all screenshots under a single directory
String dateTime = currentDateTime()

//declare prodile and set up browser options
ProfilesIni profile = new ProfilesIni()
FirefoxProfile myProfile = profile.getProfile("selenium")
FirefoxOptions options = new FirefoxOptions()
options.setProfile(myProfile)

//declare web driver
WebDriver driver = new FirefoxDriver(options)

//set the browser window size
driver.manage().window().setSize(new Dimension(1920, 1080))

//get the screen dimensions to center the window
Toolkit toolkit = Toolkit.getDefaultToolkit()
int screenWidth = toolkit.getScreenSize().width
int screenHeight = toolkit.getScreenSize().height

//calculate the top-left corner position for centering the window
int x = (screenWidth - 1920) / 2
int y = (screenHeight - 1080) / 2

//set the browser window position
driver.manage().window().setPosition(new Point(x, y))

//set the waitting times
driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS)
driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS)
def wait = new WebDriverWait(driver, Duration.ofSeconds(60)) 
def fluentWait = new FluentWait&lt;>(driver)
        .withTimeout(Duration.ofSeconds(90))
        .pollingEvery(Duration.ofMillis(500))
        .ignoring(NoSuchElementException.class)

//declare variable for filter time window
String timeValue = "90"

//declare string variables for the expected values
String expectedIndex = context.expand('${#TestCase#expectedIndex}') 
String expectedActingUser = "edrqa4b"
String expectedAction = "export"
String expectedApplicationName = "VCPort"
String expectedDescription = "Vehicle configuration history export"
String expectedEventId = "3,030,001"
String expectedEventType = context.expand('${#TestCase#expectedEventType}') 
String expectedLoggedInUser = "edrqa4b"
String expectedResult = "failed"

String url = context.expand('${#TestCase#url}')
			.replace("timeValue", timeValue)
			.replace("indexValue", expectedIndex)
			.replace("actingUserValue", expectedActingUser)
			.replace("actionValue", expectedAction)
			.replace("applicationNameValue", expectedApplicationName)
			.replace("descriptionValue", expectedDescription.replace(" ", "%20"))
			.replace("eventIdValue", expectedEventId.replace(",", ""))
			.replace("eventTypeValue", expectedEventType)
			.replace("loggedInUserValue", expectedLoggedInUser)
			.replace("resultValue", expectedResult)

//declare locators for the UI elements
By continueButton = By.id("kc-login")
By dropDown = By.xpath("//div[@class='ng-value-container']")
By option = By.xpath("//span[text()='public']")
By proceedButton = By.xpath("//button[normalize-space()='Proceed']")
By kibanaIcon = By.xpath("//i[@class='fas fa-chart-bar']")
By firstExpandButton = By.xpath("//tbody/tr[1]/td[1]/button[1]/span[1]/span[1]")
By secondExpandButton = By.xpath("//tbody/tr[3]/td[1]/button[1]/span[1]/span[1]")
By thirdExpandButton = By.xpath("//tbody/tr[5]/td[1]/button[1]/span[1]/span[1]")
By singleDocumentLink = By.xpath("//a[normalize-space()='View single document']")
By tableTab = By.xpath("//span[normalize-space()='Table']")
By indexValue = By.xpath("//div[@data-test-subj='tableDocViewRow-_index-value']")
By actingUserValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.actingUser-value']")
By actionValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.action-value']")
By applicationNameValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.applicationName-value']")
By descriptionValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.description-value']")
By eventIdValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.eventId-value']")
By eventTypeValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.eventType-value']")
By loggedInUserValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.loggedInUser-value']")
By resultValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.result-value']")

//Action - Open the OruNext web application
try {
	driver.get("https://demo.orunext.com/")
	//this first ESC press does not take place. The second one does. I don't know why for now.
	//pressEsc()
	wait.until(ExpectedConditions.presenceOfElementLocated(continueButton))
	log.info("[Action] [Passed] Open the OruNext web application")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Open the OruNext web application | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Continue button
try {
	driver.findElement(continueButton).click()
	//pressEsc()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(dropDown)))
	log.info("[Action] [Passed] Click the Continue button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Continue button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Choose tenant from dropdown
try {
	driver.findElement(dropDown).click()
	driver.findElement(option).click()
	driver.findElement(proceedButton).click()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(kibanaIcon)))
	log.info("[Action] [Passed] Action - Choose tenant from dropdown")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Action - Choose tenant from dropdown | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Open the Kibana web application
try {
	driver.get(url)
	pressEsc()
	wait.until(ExpectedConditions.presenceOfElementLocated(firstExpandButton))
	log.info("[Action] [Passed] Open the Kibana web application")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Open the Kibana web application | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the first Expand button
try {
	driver.findElement(firstExpandButton).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(singleDocumentLink))
	log.info("[Action] [Passed] Click the first Expand button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the first Expand button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the first Single Document link
try {
	driver.findElement(singleDocumentLink).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(tableTab))
	log.info("[Action] [Passed] Click the first Single Document link")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the first Single Document link | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Validate the first Single Document Values
try {
	assert driver.findElement(indexValue).getText() == expectedIndex
	assert driver.findElement(actingUserValue).getText() == expectedActingUser
	assert driver.findElement(actionValue).getText() == expectedAction
	assert driver.findElement(applicationNameValue).getText() == expectedApplicationName
	assert driver.findElement(descriptionValue).getText() == expectedDescription
	assert driver.findElement(eventIdValue).getText() == expectedEventId
	assert driver.findElement(eventTypeValue).getText() == expectedEventType
	assert driver.findElement(loggedInUserValue).getText() == expectedLoggedInUser
	assert driver.findElement(resultValue).getText() == expectedResult

	log.info("[Action] [Completed] Validate the first Single Document Values")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Validate the first Single Document Values | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Go back
try {
	driver.navigate().back();
	wait.until(ExpectedConditions.presenceOfElementLocated(secondExpandButton))
	log.info("[Action] [Passed] Go back")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Go back | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the second Expand button
try {
	driver.findElement(secondExpandButton).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(singleDocumentLink))
	log.info("[Action] [Passed] Click the second Expand button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the second Expand button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the second Single Document link
try {
	driver.findElement(singleDocumentLink).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(tableTab))
	log.info("[Action] [Passed] Click the second Single Document link")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the second Single Document link | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Validate the second Single Document Values
try {
	assert driver.findElement(indexValue).getText() == expectedIndex
	assert driver.findElement(actingUserValue).getText() == expectedActingUser
	assert driver.findElement(actionValue).getText() == expectedAction
	assert driver.findElement(applicationNameValue).getText() == expectedApplicationName
	assert driver.findElement(descriptionValue).getText() == expectedDescription
	assert driver.findElement(eventIdValue).getText() == expectedEventId
	assert driver.findElement(eventTypeValue).getText() == expectedEventType
	assert driver.findElement(loggedInUserValue).getText() == expectedLoggedInUser
	assert driver.findElement(resultValue).getText() == expectedResult

	log.info("[Action] [Completed] Validate the second Single Document Values")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Validate the second Single Document Values | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Go back
try {
	driver.navigate().back();
	wait.until(ExpectedConditions.presenceOfElementLocated(secondExpandButton))
	log.info("[Action] [Passed] Go back")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Go back | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the third Expand button
try {
	driver.findElement(thirdExpandButton).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(singleDocumentLink))
	log.info("[Action] [Passed] Click the third Expand button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the third Expand button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the third Single Document link
try {
	driver.findElement(singleDocumentLink).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(tableTab))
	log.info("[Action] [Passed] Click the third Single Document link")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the third Single Document link | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Validate the third Single Document Values
try {
	assert driver.findElement(indexValue).getText() == expectedIndex
	assert driver.findElement(actingUserValue).getText() == expectedActingUser
	assert driver.findElement(actionValue).getText() == expectedAction
	assert driver.findElement(applicationNameValue).getText() == expectedApplicationName
	assert driver.findElement(descriptionValue).getText() == expectedDescription
	assert driver.findElement(eventIdValue).getText() == expectedEventId
	assert driver.findElement(eventTypeValue).getText() == expectedEventType
	assert driver.findElement(loggedInUserValue).getText() == expectedLoggedInUser
	assert driver.findElement(resultValue).getText() == expectedResult

	log.info("[Action] [Completed] Validate the third Single Document Values")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Validate the third Single Document Values | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Close the browser
log.info("[Action] Close the browser")
driver.quit();

/* ---------- CUSTOM METHODS ---------- */

//method to press ESC
public void pressEsc() {
	Robot robot = new Robot()
	robot.delay(2500)
	robot.keyPress(KeyEvent.VK_ESCAPE)
	robot.keyRelease(KeyEvent.VK_ESCAPE)
}

//method to return current date-time
public String currentDateTime() {
	return new SimpleDateFormat("ddMMyyyyHHmmss").format(new Date()).toString()
}

//method to format a string to match the ReadyAPI directory naming convention
public String formattedString(String string) {
	return string
	.replaceAll(" ", "-").replaceAll("%", "%25").replaceAll("\\{", "%7B").replaceAll("\\}", "%7D").replaceAll("\\[", "%5B")
	.replaceAll("\\]", "%5D").replaceAll("\\(", "%28").replaceAll("\\)", "%29").replaceAll("/", "%2F").replaceAll("\\\\", "%5C")
	.replaceAll("\\+", "%2B").replaceAll("\\*", "%2A").replaceAll("\\^", "%5E").replaceAll("~", "%7E").replaceAll("=", "%3D")
	.replaceAll(">", "%3E").replaceAll("&lt;", "%3C").replaceAll("!", "%21").replaceAll("\\?", "%3F").replaceAll("@", "%40")
	.replaceAll("#", "%23").replaceAll("\\\$", "%24").replaceAll("&amp;", "%26").replaceAll("\\|", "%7C").replaceAll(";", "%3B")
	.replaceAll(":", "%3A").replaceAll("'", "%27").replaceAll("\"", "%22").replaceAll("`", "%60").replaceAll(",", "%2C")
}

//method to take a screenshot
public void takeScreenshot(WebDriver  webDriver,  String dateTime) throws Exception {
	Thread.sleep(1000) 
	TakesScreenshot screenshot  = ((TakesScreenshot) webDriver)
	File screenshotFile = screenshot.getScreenshotAs(OutputType.FILE)
	String path = new GroovyUtils(context).getProjectPath() +
						"\\Screenshots\\" +  
						context.expand('${#TestSuite#testSet}')  + "\\" +
						context.expand('${#TestCase#test}')  + "\\" + 
						formattedString(testRunner.testCase.getTestStepAt(context.getCurrentStepIndex()).name) +
						"\\Screenshots_" + dateTime + "\\Screenshot_" + currentDateTime() + ".png"
	File destinationFile = new File(path)
	FileUtils.copyFile(screenshotFile, destinationFile)
}

//method to take a screenshot and close the browser
public void takeScreenshotAndCloseBrowser(WebDriver  webDriver,  String dateTime) {
	takeScreenshot(webDriver, dateTime)
	log.info("Closing the browser in response to failure")
	webDriver.quit()
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="manualTestStep" name="Pause [5]" id="ccdbcce3-b570-4c68-aab4-c1e32d1a796f" disabled="true">
    <con:settings/>
    <con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
  </con:testStep>
  <con:testStep type="groovy" name="[A_5] [CARBP] Download Search Results" id="d7f40ba2-336f-4406-929f-10bfdde0436c">
    <con:settings/>
    <con:config>
      <script>import java.io.File
import java.time.Duration
import java.text.SimpleDateFormat
import java.util.concurrent.TimeUnit
import java.awt.Robot
import java.awt.event.KeyEvent

import org.apache.commons.io.FileUtils

import org.openqa.selenium.firefox.ProfilesIni
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.firefox.FirefoxProfile
import org.openqa.selenium.firefox.FirefoxOptions
import org.openqa.selenium.WebDriver
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions
import org.openqa.selenium.WebElement
import org.openqa.selenium.By
import org.openqa.selenium.OutputType
import org.openqa.selenium.TakesScreenshot

import org.openqa.selenium.Dimension
import org.openqa.selenium.Point
import org.openqa.selenium.support.ui.FluentWait
import com.eviware.soapui.support.GroovyUtils
import java.awt.Toolkit

/* ---------- MAIN CODE ---------- */

//declare date-time property to be used to create all screenshots under a single directory
String dateTime = currentDateTime()

//declare prodile and set up browser options
ProfilesIni profile = new ProfilesIni()
FirefoxProfile myProfile = profile.getProfile("selenium")
FirefoxOptions options = new FirefoxOptions()
options.setProfile(myProfile)

//declare web driver
WebDriver driver = new FirefoxDriver(options)

//set the browser window size
driver.manage().window().setSize(new Dimension(1920, 1080))

//get the screen dimensions to center the window
Toolkit toolkit = Toolkit.getDefaultToolkit()
int screenWidth = toolkit.getScreenSize().width
int screenHeight = toolkit.getScreenSize().height

//calculate the top-left corner position for centering the window
int x = (screenWidth - 1920) / 2
int y = (screenHeight - 1080) / 2

//set the browser window position
driver.manage().window().setPosition(new Point(x, y))

//set the waitting times
driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS)
driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS)
def wait = new WebDriverWait(driver, Duration.ofSeconds(60)) 
def fluentWait = new FluentWait&lt;>(driver)
        .withTimeout(Duration.ofSeconds(90))
        .pollingEvery(Duration.ofMillis(500))
        .ignoring(NoSuchElementException.class)

//declare locators for the UI elements
By continueButton = By.id("kc-login")
By dropDown = By.xpath("//div[@class='ng-value-container']")
By option = By.xpath("//span[text()='public']")
By proceedButton = By.xpath("//button[normalize-space()='Proceed']")
By carbPortPanel = By.xpath("//a[normalize-space()='CARB Port']")
By vinBox = By.id("vin")
By searchVehicleButton = By.xpath("//button[normalize-space()='Search Vehicle']")
String vin = context.expand('${#TestCase#vin}') 
By vinEntry = By.xpath("//a[normalize-space()='" + vin + "']")
By downloadSearchResultButton = By.xpath("//button[normalize-space()='Download Search Result']")

//Action - Open the OruNext web application
try {
	driver.get("https://demo.orunext.com/")
	//this first ESC press does not take place. The second one does. I don't know why for now.
	//pressEsc()
	//pressEnter()
	wait.until(ExpectedConditions.presenceOfElementLocated(continueButton))
	log.info("[Action] [Passed] Open the OruNext web application")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Open the OruNext web application | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Continue button
try {
	driver.findElement(continueButton).click()
	//pressEsc()
	//pressEnter()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(dropDown)))
	log.info("[Action] [Passed] Click the Continue button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Continue button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Choose tenant from dropdown
try {
	driver.findElement(dropDown).click()
	driver.findElement(option).click()
	driver.findElement(proceedButton).click()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(carbPortPanel)))
	log.info("[Action] [Passed] Action - Choose tenant from dropdown")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Action - Choose tenant from dropdown | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the CARB Port panel
try {
	driver.findElement(carbPortPanel).click()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(vinBox)))
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(searchVehicleButton)))
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(downloadSearchResultButton)))
	log.info("[Action] [Passed] Click the Vehicle Updates panel")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Vehicle Updates panel | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

/*
//Action - Enter the VIN value in the VIN input box
try {
	driver.findElement(vinBox).sendKeys(vin)
	log.info("[Action] [Passed] Enter the VIN value in the VIN input box")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Enter the VIN value in the VIN input box | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Search Vehicle button
try {
	driver.findElement(searchVehicleButton).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(vinEntry))
	log.info("[Action] [Passed] Click the Search Vehicle button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Search Vehicle button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}
*/

//Action - Click the Download Search Result button
try {
	driver.findElement(downloadSearchResultButton).click()
	log.info("[Action] [Passed] Click the Download Search Result button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Download Search Result button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Close the browser
log.info("[Action] Close the browser")
driver.quit()

/* ---------- CUSTOM METHODS ---------- */

//method to press ESC
public void pressEsc() {
	Robot robot = new Robot()
	robot.delay(2500)
	robot.keyPress(KeyEvent.VK_ESCAPE)
	robot.keyRelease(KeyEvent.VK_ESCAPE)
}

//method to press ENTER
public void pressEnter() {
	Robot robot = new Robot()
	robot.delay(2500)
	robot.keyPress(KeyEvent.VK_ENTER)
	robot.keyRelease(KeyEvent.VK_ENTER)
}

//method to return current date-time
public String currentDateTime() {
	return new SimpleDateFormat("ddMMyyyyHHmmss").format(new Date()).toString()
}

//method to format a string to match the ReadyAPI directory naming convention
public String formattedString(String string) {
	return string
	.replaceAll(" ", "-").replaceAll("%", "%25").replaceAll("\\{", "%7B").replaceAll("\\}", "%7D").replaceAll("\\[", "%5B")
	.replaceAll("\\]", "%5D").replaceAll("\\(", "%28").replaceAll("\\)", "%29").replaceAll("/", "%2F").replaceAll("\\\\", "%5C")
	.replaceAll("\\+", "%2B").replaceAll("\\*", "%2A").replaceAll("\\^", "%5E").replaceAll("~", "%7E").replaceAll("=", "%3D")
	.replaceAll(">", "%3E").replaceAll("&lt;", "%3C").replaceAll("!", "%21").replaceAll("\\?", "%3F").replaceAll("@", "%40")
	.replaceAll("#", "%23").replaceAll("\\\$", "%24").replaceAll("&amp;", "%26").replaceAll("\\|", "%7C").replaceAll(";", "%3B")
	.replaceAll(":", "%3A").replaceAll("'", "%27").replaceAll("\"", "%22").replaceAll("`", "%60").replaceAll(",", "%2C")
}

//method to take a screenshot
public void takeScreenshot(WebDriver  webDriver,  String dateTime) throws Exception {
	Thread.sleep(1000) 
	TakesScreenshot screenshot  = ((TakesScreenshot) webDriver)
	File screenshotFile = screenshot.getScreenshotAs(OutputType.FILE)
	String path = new GroovyUtils(context).getProjectPath() +
						"\\Screenshots\\" +  
						context.expand('${#TestSuite#testSet}')  + "\\" +
						context.expand('${#TestCase#test}')  + "\\" + 
						formattedString(testRunner.testCase.getTestStepAt(context.getCurrentStepIndex()).name) +
						"\\Screenshots_" + dateTime + "\\Screenshot_" + currentDateTime() + ".png"
	File destinationFile = new File(path)
	FileUtils.copyFile(screenshotFile, destinationFile)
}

//method to take a screenshot and close the browser
public void takeScreenshotAndCloseBrowser(WebDriver  webDriver,  String dateTime) {
	takeScreenshot(webDriver, dateTime)
	log.info("Closing the browser in response to failure")
	webDriver.quit()
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="delay" name="[Delay] [5] 30 Seconds" id="9f87730b-1304-4656-aa55-34efa8bf5371">
    <con:settings/>
    <con:config>
      <delay>30000</delay>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="[E_5] [CARBP] Check That Logs Have Been Generated" id="ed664926-956d-43c2-b849-1626c52ddb6e">
    <con:settings/>
    <con:config>
      <script>import java.io.File
import java.time.Duration
import java.text.SimpleDateFormat
import java.util.concurrent.TimeUnit
import java.awt.Robot
import java.awt.event.KeyEvent

import org.apache.commons.io.FileUtils

import org.openqa.selenium.firefox.ProfilesIni
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.firefox.FirefoxProfile
import org.openqa.selenium.firefox.FirefoxOptions
import org.openqa.selenium.WebDriver
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions
import org.openqa.selenium.WebElement
import org.openqa.selenium.By
import org.openqa.selenium.OutputType
import org.openqa.selenium.TakesScreenshot

import org.openqa.selenium.Dimension
import org.openqa.selenium.Point
import org.openqa.selenium.support.ui.FluentWait
import com.eviware.soapui.support.GroovyUtils
import java.awt.Toolkit

/* ---------- MAIN CODE ---------- */

//declare date-time property to be used to create all screenshots under a single directory
String dateTime = currentDateTime()

//declare prodile and set up browser options
ProfilesIni profile = new ProfilesIni()
FirefoxProfile myProfile = profile.getProfile("selenium")
FirefoxOptions options = new FirefoxOptions()
options.setProfile(myProfile)

//declare web driver
WebDriver driver = new FirefoxDriver(options)

//set the browser window size
driver.manage().window().setSize(new Dimension(1920, 1080))

//get the screen dimensions to center the window
Toolkit toolkit = Toolkit.getDefaultToolkit()
int screenWidth = toolkit.getScreenSize().width
int screenHeight = toolkit.getScreenSize().height

//calculate the top-left corner position for centering the window
int x = (screenWidth - 1920) / 2
int y = (screenHeight - 1080) / 2

//set the browser window position
driver.manage().window().setPosition(new Point(x, y))

//set the waitting times
driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS)
driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS)
def wait = new WebDriverWait(driver, Duration.ofSeconds(60)) 
def fluentWait = new FluentWait&lt;>(driver)
        .withTimeout(Duration.ofSeconds(90))
        .pollingEvery(Duration.ofMillis(500))
        .ignoring(NoSuchElementException.class)

//declare variable for filter time window
String timeValue = "90"

//declare string variables for the expected values
String expectedIndex = context.expand('${#TestCase#expectedIndex}') 
String expectedActingUser = "edrqa4b"
String expectedAction = "export"
String expectedApplicationName = "CARB"
String expectedDescription = "CARB data download"
String expectedEventId = "3,030,002"
String expectedEventType = context.expand('${#TestCase#expectedEventType}') 
String expectedLoggedInUser = "edrqa4b"
String expectedResult = "successful"

String url = context.expand('${#TestCase#altUrl}')
			.replace("timeValue", timeValue)
			.replace("indexValue", expectedIndex)
			.replace("actingUserValue", expectedActingUser)
			.replace("actionValue", expectedAction)
			.replace("applicationNameValue", expectedApplicationName.replace(" ", "%20"))
			.replace("descriptionValue", expectedDescription.replace(" ", "%20"))
			.replace("eventIdValue", expectedEventId.replace(",", ""))
			.replace("eventTypeValue", expectedEventType)
			.replace("loggedInUserValue", expectedLoggedInUser)
			.replace("resultValue", expectedResult)

//declare locators for the UI elements
By continueButton = By.id("kc-login")
By dropDown = By.xpath("//div[@class='ng-value-container']")
By option = By.xpath("//span[text()='public']")
By proceedButton = By.xpath("//button[normalize-space()='Proceed']")
By kibanaIcon = By.xpath("//i[@class='fas fa-chart-bar']")
By expandButton = By.xpath("//button[@aria-label='Toggle row details']//span[@class='euiButtonContent euiButtonEmpty__content']")
By singleDocumentLink = By.xpath("//a[normalize-space()='View single document']")
By tableTab = By.xpath("//span[normalize-space()='Table']")
By indexValue = By.xpath("//div[@data-test-subj='tableDocViewRow-_index-value']")
By actingUserValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.actingUser-value']")
By actionValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.action-value']")
By applicationNameValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.applicationName-value']")
By descriptionValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.description-value']")
By eventIdValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.eventId-value']")
By eventTypeValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.eventType-value']")
By loggedInUserValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.loggedInUser-value']")
By resultValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.result-value']")

//Action - Open the OruNext web application
try {
	driver.get("https://demo.orunext.com/")
	//this first ESC press does not take place. The second one does. I don't know why for now.
	//pressEsc()
	//pressEnter()
	wait.until(ExpectedConditions.presenceOfElementLocated(continueButton))
	log.info("[Action] [Passed] Open the OruNext web application")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Open the OruNext web application | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Continue button
try {
	driver.findElement(continueButton).click()
	//pressEsc()
	//pressEnter()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(dropDown)))
	log.info("[Action] [Passed] Click the Continue button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Continue button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Choose tenant from dropdown
try {
	driver.findElement(dropDown).click()
	driver.findElement(option).click()
	driver.findElement(proceedButton).click()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(kibanaIcon)))
	log.info("[Action] [Passed] Action - Choose tenant from dropdown")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Action - Choose tenant from dropdown | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Open the Kibana web application
try {
	driver.get(url)
	wait.until(ExpectedConditions.presenceOfElementLocated(expandButton))
	log.info("[Action] [Passed] Open the Kibana web application")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Open the Kibana web application | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Expand button
try {
	driver.findElement(expandButton).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(singleDocumentLink))
	log.info("[Action] [Passed] Click the Expand button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Expand button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Single Document  link
try {
	driver.findElement(singleDocumentLink).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(tableTab))
	log.info("[Action] [Passed] Click the Single Document link")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Single Document link | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Validate the Single Document Values
try {
	assert driver.findElement(indexValue).getText() == expectedIndex
	assert driver.findElement(actingUserValue).getText() == expectedActingUser
	assert driver.findElement(actionValue).getText() == expectedAction
	assert driver.findElement(applicationNameValue).getText() == expectedApplicationName
	assert driver.findElement(descriptionValue).getText() == expectedDescription
	assert driver.findElement(eventIdValue).getText() == expectedEventId
	assert driver.findElement(eventTypeValue).getText() == expectedEventType
	assert driver.findElement(loggedInUserValue).getText() == expectedLoggedInUser
	assert driver.findElement(resultValue).getText() == expectedResult

	log.info("[Action] [Completed] Validate the Single Document Values")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Validate the Single Document Values | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Close the browser
log.info("[Action] Close the browser")
driver.quit();

/* ---------- CUSTOM METHODS ---------- */

//method to press ESC
public void pressEsc() {
	Robot robot = new Robot()
	robot.delay(2500)
	robot.keyPress(KeyEvent.VK_ESCAPE)
	robot.keyRelease(KeyEvent.VK_ESCAPE)
}

//method to press ENTER
public void pressEnter() {
	Robot robot = new Robot()
	robot.delay(2500)
	robot.keyPress(KeyEvent.VK_ENTER)
	robot.keyRelease(KeyEvent.VK_ENTER)
}

//method to return current date-time
public String currentDateTime() {
	return new SimpleDateFormat("ddMMyyyyHHmmss").format(new Date()).toString()
}

//method to format a string to match the ReadyAPI directory naming convention
public String formattedString(String string) {
	return string
	.replaceAll(" ", "-").replaceAll("%", "%25").replaceAll("\\{", "%7B").replaceAll("\\}", "%7D").replaceAll("\\[", "%5B")
	.replaceAll("\\]", "%5D").replaceAll("\\(", "%28").replaceAll("\\)", "%29").replaceAll("/", "%2F").replaceAll("\\\\", "%5C")
	.replaceAll("\\+", "%2B").replaceAll("\\*", "%2A").replaceAll("\\^", "%5E").replaceAll("~", "%7E").replaceAll("=", "%3D")
	.replaceAll(">", "%3E").replaceAll("&lt;", "%3C").replaceAll("!", "%21").replaceAll("\\?", "%3F").replaceAll("@", "%40")
	.replaceAll("#", "%23").replaceAll("\\\$", "%24").replaceAll("&amp;", "%26").replaceAll("\\|", "%7C").replaceAll(";", "%3B")
	.replaceAll(":", "%3A").replaceAll("'", "%27").replaceAll("\"", "%22").replaceAll("`", "%60").replaceAll(",", "%2C")
}

//method to take a screenshot
public void takeScreenshot(WebDriver  webDriver,  String dateTime) throws Exception {
	Thread.sleep(1000) 
	TakesScreenshot screenshot  = ((TakesScreenshot) webDriver)
	File screenshotFile = screenshot.getScreenshotAs(OutputType.FILE)
	String path = new GroovyUtils(context).getProjectPath() +
						"\\Screenshots\\" +  
						context.expand('${#TestSuite#testSet}')  + "\\" +
						context.expand('${#TestCase#test}')  + "\\" + 
						formattedString(testRunner.testCase.getTestStepAt(context.getCurrentStepIndex()).name) +
						"\\Screenshots_" + dateTime + "\\Screenshot_" + currentDateTime() + ".png"
	File destinationFile = new File(path)
	FileUtils.copyFile(screenshotFile, destinationFile)
}

//method to take a screenshot and close the browser
public void takeScreenshotAndCloseBrowser(WebDriver  webDriver,  String dateTime) {
	takeScreenshot(webDriver, dateTime)
	log.info("Closing the browser in response to failure")
	webDriver.quit()
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="manualTestStep" name="Pause [6]" id="e3af6991-ed5c-4837-977f-cef2f0a1bf84" disabled="true">
    <con:settings/>
    <con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
  </con:testStep>
  <con:testStep type="restrequest" name="[A_6] [CARBP] Fail To Download Search Results" id="477a8438-3bd1-498e-8edc-6efa3cf946e5">
    <con:settings/>
    <con:config service="CARB Port" resourcePath="/carb/data/searches/export" methodName="exportCarbData" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="[A_6] [CARBP] Fail To Download Search Results" id="be23ef00-744e-4149-8d01-3e4c7113c9bc" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="Authorization" value="Bearer ${#TestCase#accessToken}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>https://demo.orunext.com/api/oru</con:endpoint>
        <con:request>{
   "columns":[
      "vin",
      "referenceId",
      "brand",
      "updateId",
      "uploadTimestamp",
      "dispatchTime",
      "uploadData",
      "error"
   ],
   "columnConditions":[
      {
         "column":"vin",
         "operator":"containsIgnoringCase",
         "value": 
      }
   ],
   "sortDirection":"desc",
   "count":true,
   "start":0,
   "sortBy":"uploadTimestamp"
}</con:request>
        <con:originalUri>https://demo.orunext.com/api/oru/carb/data/searches/export</con:originalUri>
        <con:assertion type="DataAndMetadataAssertion" name="Status Line is equal to &quot;HTTP/1.1 400 Bad Request&quot;" id="0893c2c0-1a2a-43af-920d-8f4baa0df150">
          <con:configuration xsi:type="con:DataAndMetadataAssertion">
            <con:mode>Received Metadata</con:mode>
            <con:elements>
              <con:path>$['Headers']['date']</con:path>
              <con:element>date</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Thu, 29 Feb 2024 11:58:23 GMT</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['expires']</con:path>
              <con:element>expires</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['transfer-encoding']</con:path>
              <con:element>transfer-encoding</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>chunked</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-content-type-options']</con:path>
              <con:element>x-content-type-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>nosniff</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-xss-protection']</con:path>
              <con:element>x-xss-protection</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-frame-options']</con:path>
              <con:element>x-frame-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>DENY</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-type']</con:path>
              <con:element>content-type</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>application/json</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['#status#']</con:path>
              <con:element>#status#</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>true</con:enabled>
              <con:expectedValue>HTTP/1.1 400 Bad Request</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['cache-control']</con:path>
              <con:element>cache-control</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache, no-store, max-age=0, must-revalidate</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['strict-transport-security']</con:path>
              <con:element>strict-transport-security</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>max-age=31536000 ; includeSubDomains</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['pragma']</con:path>
              <con:element>pragma</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:originalMessage>{"Headers":{"date":"Thu, 29 Feb 2024 11:58:23 GMT","expires":"0","transfer-encoding":"chunked","x-content-type-options":"nosniff","x-xss-protection":"0","x-frame-options":"DENY","content-type":"application/json","#status#":"HTTP/1.1 404 Not Found","cache-control":"no-cache, no-store, max-age=0, must-revalidate","strict-transport-security":"max-age=31536000 ; includeSubDomains","pragma":"no-cache"}}</con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:assertion type="DataAndMetadataAssertion" name="Content-Type is equal to &quot;application/json&quot;" id="de512efb-5cf1-4cae-8fee-cee78f1098db">
          <con:configuration xsi:type="con:DataAndMetadataAssertion">
            <con:mode>Received Metadata</con:mode>
            <con:elements>
              <con:path>$['Headers']['date']</con:path>
              <con:element>date</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Thu, 29 Feb 2024 11:58:23 GMT</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['expires']</con:path>
              <con:element>expires</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['transfer-encoding']</con:path>
              <con:element>transfer-encoding</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>chunked</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-content-type-options']</con:path>
              <con:element>x-content-type-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>nosniff</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-xss-protection']</con:path>
              <con:element>x-xss-protection</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-frame-options']</con:path>
              <con:element>x-frame-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>DENY</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-type']</con:path>
              <con:element>content-type</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>true</con:enabled>
              <con:expectedValue>application/json</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['#status#']</con:path>
              <con:element>#status#</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>HTTP/1.1 404 Not Found</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['cache-control']</con:path>
              <con:element>cache-control</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache, no-store, max-age=0, must-revalidate</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['strict-transport-security']</con:path>
              <con:element>strict-transport-security</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>max-age=31536000 ; includeSubDomains</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['pragma']</con:path>
              <con:element>pragma</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:originalMessage>{"Headers":{"date":"Thu, 29 Feb 2024 11:58:23 GMT","expires":"0","transfer-encoding":"chunked","x-content-type-options":"nosniff","x-xss-protection":"0","x-frame-options":"DENY","content-type":"application/json","#status#":"HTTP/1.1 404 Not Found","cache-control":"no-cache, no-store, max-age=0, must-revalidate","strict-transport-security":"max-age=31536000 ; includeSubDomains","pragma":"no-cache"}}</con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[status] is equal to &quot;400&quot;" id="f6cbc458-933b-4d9e-b409-225c3d4a2dd1">
          <con:configuration>
            <path>$['status']</path>
            <content>400</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[error] is equal to &quot;Bad Request&quot;" id="897e133d-9695-495b-bc54-3b9e95b6a0aa">
          <con:configuration>
            <path>$['error']</path>
            <content>"Bad Request"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[message] is equal to&quot;Invalid format&quot;" id="dcad3421-7c22-4088-bb61-92724287f4f7">
          <con:configuration>
            <path>$['message']</path>
            <content>"Invalid format"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Existence Match" name="[ref] exists" id="5d757c7e-3483-4e19-ac3c-33f32cfed051">
          <con:configuration>
            <path>$['ref']</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" name="[path] is equal to &quot;/carb/data/searches/export&quot;" id="6461f06d-4da8-44b7-bd6e-198c3e0c723c">
          <con:configuration>
            <path>$['path']</path>
            <content>"/carb/data/searches/export"</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" name="[timestamp] contains the current date" id="4fae66b9-80d8-434a-8905-4db3ade44a5e">
          <con:configuration>
            <scriptText>import java.text.SimpleDateFormat
import groovy.json.JsonSlurper

//get the JSON response body of the API response for the current test step
def jsonResponse = new JsonSlurper().parseText(messageExchange.response.responseContent)

//declare variables for the value of the [timestamp] key
String timestamp = jsonResponse.timestamp
//declare variables for the current date
String currentDate = new SimpleDateFormat("yyyy-MM-dd").format(new Date()).toString()

//assert that [timestamp] contains the current date
assert timestamp.contains(currentDate)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="19d15dbe-9720-4a73-b417-71308b8db01e">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="delay" name="[Delay] [6] 30 Seconds" id="9e84db55-53a3-45a5-881b-54c6f499eba0">
    <con:settings/>
    <con:config>
      <delay>30000</delay>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="[E_6] [CARBP] Check That Logs Have Been Generated" id="8a76a6e8-d820-49f9-92e4-a4065842346c">
    <con:settings/>
    <con:config>
      <script>import java.io.File
import java.time.Duration
import java.text.SimpleDateFormat
import java.util.concurrent.TimeUnit
import java.awt.Robot
import java.awt.event.KeyEvent

import org.apache.commons.io.FileUtils

import org.openqa.selenium.firefox.ProfilesIni
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.firefox.FirefoxProfile
import org.openqa.selenium.firefox.FirefoxOptions
import org.openqa.selenium.WebDriver
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions
import org.openqa.selenium.WebElement
import org.openqa.selenium.By
import org.openqa.selenium.OutputType
import org.openqa.selenium.TakesScreenshot

import org.openqa.selenium.Dimension
import org.openqa.selenium.Point
import org.openqa.selenium.support.ui.FluentWait
import com.eviware.soapui.support.GroovyUtils
import java.awt.Toolkit

/* ---------- MAIN CODE ---------- */

//declare date-time property to be used to create all screenshots under a single directory
String dateTime = currentDateTime()

//declare prodile and set up browser options
ProfilesIni profile = new ProfilesIni()
FirefoxProfile myProfile = profile.getProfile("selenium")
FirefoxOptions options = new FirefoxOptions()
options.setProfile(myProfile)

//declare web driver
WebDriver driver = new FirefoxDriver(options)

//set the browser window size
driver.manage().window().setSize(new Dimension(1920, 1080))

//get the screen dimensions to center the window
Toolkit toolkit = Toolkit.getDefaultToolkit()
int screenWidth = toolkit.getScreenSize().width
int screenHeight = toolkit.getScreenSize().height

//calculate the top-left corner position for centering the window
int x = (screenWidth - 1920) / 2
int y = (screenHeight - 1080) / 2

//set the browser window position
driver.manage().window().setPosition(new Point(x, y))

//set the waitting times
driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS)
driver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS)
def wait = new WebDriverWait(driver, Duration.ofSeconds(60)) 
def fluentWait = new FluentWait&lt;>(driver)
        .withTimeout(Duration.ofSeconds(90))
        .pollingEvery(Duration.ofMillis(500))
        .ignoring(NoSuchElementException.class)

//declare variable for filter time window
String timeValue = "90"

//declare string variables for the expected values
String expectedIndex = context.expand('${#TestCase#expectedIndex}') 
String expectedActingUser = "edrqa4b"
String expectedAction = "export"
String expectedApplicationName = "CARB"
String expectedDescription = "CARB data download"
String expectedEventId = "3,030,001"
String expectedEventType = context.expand('${#TestCase#expectedEventType}') 
String expectedLoggedInUser = "edrqa4b"
String expectedResult = "failed"

String url = context.expand('${#TestCase#altUrl}')
			.replace("timeValue", timeValue)
			.replace("indexValue", expectedIndex)
			.replace("actingUserValue", expectedActingUser)
			.replace("actionValue", expectedAction)
			.replace("applicationNameValue", expectedApplicationName.replace(" ", "%20"))
			.replace("descriptionValue", expectedDescription.replace(" ", "%20"))
			.replace("eventIdValue", expectedEventId.replace(",", ""))
			.replace("eventTypeValue", expectedEventType)
			.replace("loggedInUserValue", expectedLoggedInUser)
			.replace("resultValue", expectedResult)

//declare locators for the UI elements
By continueButton = By.id("kc-login")
By dropDown = By.xpath("//div[@class='ng-value-container']")
By option = By.xpath("//span[text()='public']")
By proceedButton = By.xpath("//button[normalize-space()='Proceed']")
By kibanaIcon = By.xpath("//i[@class='fas fa-chart-bar']")
By expandButton = By.xpath("//button[@aria-label='Toggle row details']//span[@class='euiButtonContent euiButtonEmpty__content']")
By singleDocumentLink = By.xpath("//a[normalize-space()='View single document']")
By tableTab = By.xpath("//span[normalize-space()='Table']")
By indexValue = By.xpath("//div[@data-test-subj='tableDocViewRow-_index-value']")
By actingUserValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.actingUser-value']")
By actionValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.action-value']")
By applicationNameValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.applicationName-value']")
By descriptionValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.description-value']")
By eventIdValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.eventId-value']")
By eventTypeValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.eventType-value']")
By loggedInUserValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.loggedInUser-value']")
By resultValue = By.xpath("//div[@data-test-subj='tableDocViewRow-siemMessage.result-value']")

//Action - Open the OruNext web application
try {
	driver.get("https://demo.orunext.com/")
	//this first ESC press does not take place. The second one does. I don't know why for now.
	//pressEsc()
	//pressEnter()
	wait.until(ExpectedConditions.presenceOfElementLocated(continueButton))
	log.info("[Action] [Passed] Open the OruNext web application")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Open the OruNext web application | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Continue button
try {
	driver.findElement(continueButton).click()
	//pressEsc()
	//pressEnter()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(dropDown)))
	log.info("[Action] [Passed] Click the Continue button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Continue button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Choose tenant from dropdown
try {
	driver.findElement(dropDown).click()
	driver.findElement(option).click()
	driver.findElement(proceedButton).click()
	wait.until(ExpectedConditions.visibilityOf(driver.findElement(kibanaIcon)))
	log.info("[Action] [Passed] Action - Choose tenant from dropdown")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Action - Choose tenant from dropdown | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Open the Kibana web application
try {
	driver.get(url)
	wait.until(ExpectedConditions.presenceOfElementLocated(expandButton))
	log.info("[Action] [Passed] Open the Kibana web application")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Open the Kibana web application | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Expand button
try {
	driver.findElement(expandButton).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(singleDocumentLink))
	log.info("[Action] [Passed] Click the Expand button")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Expand button | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Click the Single Document  link
try {
	driver.findElement(singleDocumentLink).click()
	wait.until(ExpectedConditions.presenceOfElementLocated(tableTab))
	log.info("[Action] [Passed] Click the Single Document link")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Click the Single Document link | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Validate the Single Document Values
try {
	assert driver.findElement(indexValue).getText() == expectedIndex
	assert driver.findElement(actingUserValue).getText() == expectedActingUser
	assert driver.findElement(actionValue).getText() == expectedAction
	assert driver.findElement(applicationNameValue).getText() == expectedApplicationName
	assert driver.findElement(descriptionValue).getText() == expectedDescription
	assert driver.findElement(eventIdValue).getText() == expectedEventId
	assert driver.findElement(eventTypeValue).getText() == expectedEventType
	assert driver.findElement(loggedInUserValue).getText() == expectedLoggedInUser
	assert driver.findElement(resultValue).getText() == expectedResult
	
	log.info("[Action] [Completed] Validate the Single Document Values")
	takeScreenshot(driver, dateTime)
}
catch (Exception e) {
	log.info("[Action] [Failed] Validate the Single Document Values | " + e.toString())
	takeScreenshotAndCloseBrowser(driver, dateTime)
	throw e
}

//Action - Close the browser
log.info("[Action] Close the browser")
driver.quit();

/* ---------- CUSTOM METHODS ---------- */

//method to press ESC
public void pressEsc() {
	Robot robot = new Robot()
	robot.delay(2500)
	robot.keyPress(KeyEvent.VK_ESCAPE)
	robot.keyRelease(KeyEvent.VK_ESCAPE)
}

//method to press ENTER
public void pressEnter() {
	Robot robot = new Robot()
	robot.delay(2500)
	robot.keyPress(KeyEvent.VK_ENTER)
	robot.keyRelease(KeyEvent.VK_ENTER)
}

//method to return current date-time
public String currentDateTime() {
	return new SimpleDateFormat("ddMMyyyyHHmmss").format(new Date()).toString()
}

//method to format a string to match the ReadyAPI directory naming convention
public String formattedString(String string) {
	return string
	.replaceAll(" ", "-").replaceAll("%", "%25").replaceAll("\\{", "%7B").replaceAll("\\}", "%7D").replaceAll("\\[", "%5B")
	.replaceAll("\\]", "%5D").replaceAll("\\(", "%28").replaceAll("\\)", "%29").replaceAll("/", "%2F").replaceAll("\\\\", "%5C")
	.replaceAll("\\+", "%2B").replaceAll("\\*", "%2A").replaceAll("\\^", "%5E").replaceAll("~", "%7E").replaceAll("=", "%3D")
	.replaceAll(">", "%3E").replaceAll("&lt;", "%3C").replaceAll("!", "%21").replaceAll("\\?", "%3F").replaceAll("@", "%40")
	.replaceAll("#", "%23").replaceAll("\\\$", "%24").replaceAll("&amp;", "%26").replaceAll("\\|", "%7C").replaceAll(";", "%3B")
	.replaceAll(":", "%3A").replaceAll("'", "%27").replaceAll("\"", "%22").replaceAll("`", "%60").replaceAll(",", "%2C")
}

//method to take a screenshot
public void takeScreenshot(WebDriver  webDriver,  String dateTime) throws Exception {
	Thread.sleep(1000) 
	TakesScreenshot screenshot  = ((TakesScreenshot) webDriver)
	File screenshotFile = screenshot.getScreenshotAs(OutputType.FILE)
	String path = new GroovyUtils(context).getProjectPath() +
						"\\Screenshots\\" +  
						context.expand('${#TestSuite#testSet}')  + "\\" +
						context.expand('${#TestCase#test}')  + "\\" + 
						formattedString(testRunner.testCase.getTestStepAt(context.getCurrentStepIndex()).name) +
						"\\Screenshots_" + dateTime + "\\Screenshot_" + currentDateTime() + ".png"
	File destinationFile = new File(path)
	FileUtils.copyFile(screenshotFile, destinationFile)
}

//method to take a screenshot and close the browser
public void takeScreenshotAndCloseBrowser(WebDriver  webDriver,  String dateTime) {
	takeScreenshot(webDriver, dateTime)
	log.info("Closing the browser in response to failure")
	webDriver.quit()
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="manualTestStep" name="Pause [7]" id="6b0d104c-764c-44bf-ac2f-df6dfd087e0d" disabled="true">
    <con:settings/>
    <con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
  </con:testStep>
  <con:testStep type="restrequest" name="[Update] Set JIRA Test Case Execution Status" id="93121811-0121-43b1-a59a-609a87321da2" disabled="true">
    <con:settings/>
    <con:config service="TestExecution Automation" resourcePath="/jira/rest/raven/1.0/testexec/{testExecutionId}/execute/{testCaseId}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="[Update] Set JIRA Test Case Execution Status" id="e20818b5-afc8-42d6-94a1-0f0247f1cf13" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment>&lt;con:entry key="cookie" value="${#Global#jiraCookie}" xmlns:con="http://eviware.com/soapui/config"/>&lt;con:entry key="Authorization" value="Bearer ${#TestCase#accessToken}" xmlns:con="http://eviware.com/soapui/config"/>&lt;/xml-fragment></con:setting>
        </con:settings>
        <con:endpoint>https://devstack.vwgroup.com</con:endpoint>
        <con:request>0</con:request>
        <con:originalUri>https://devstack.vwgroup.com/jira/rest/raven/1.0/testexec/OTA-12453/execute/OTA-3433</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="c9eb5b90-b1b5-46e2-9b18-08ebe3facf22" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="86753b32-5402-4a25-9d6a-8d7e8f37f326" name="Script Assertion">
          <con:configuration>
            <scriptText>import groovy.json.JsonSlurper

// Following code will grab the Json response 
def response=messageExchange.response.responseContent
def jsonSul=new JsonSlurper().parseText(response)

log.info jsonSul.obj.test.id

context.testCase.setPropertyValue("testIssueId", jsonSul.obj.test.id.toString())</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="testExecutionId" value="${#Global#testExecutionId}"/>
          <con:entry key="testCaseId" value="${#TestCase#test}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="4f515789-2a71-4da6-9bbc-0aff4cd795fa">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="9ba48164-5af1-48d4-aa59-9d1e85e3e71a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7b56b5f6-5164-4fbf-8821-ef5b0d3790b7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="19d15dbe-9720-4a73-b417-71308b8db01e">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="[Tear-Down] Delete Vehicle Configuration" id="48d56b3b-299f-4eda-a784-35c91ae5e088">
    <con:settings/>
    <con:config service="ESR Labs ORU App - Vehicle Configuration" resourcePath="/api/oru/vehicle_configurations/vehicles/{vin}" methodName="deleteVehicleConfigurationVehicle" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="[Tear-Down] Delete Vehicle Configuration" id="22254bfd-6197-4cb8-bcd3-96a0e54ab299" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="Authorization" value="Bearer ${#TestCase#accessToken}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>https://demo.orunext.com</con:endpoint>
        <con:request/>
        <con:originalUri>https://demo.orunext.com/api/oru/vehicle_configurations/vehicles/AMV20231124094302</con:originalUri>
        <con:assertion type="DataAndMetadataAssertion" id="99f6df2a-ce23-4c02-bbc3-594631382b9f" name="Status Line is equal to &quot;HTTP/1.1 204 No Content&quot;">
          <con:configuration xsi:type="con:DataAndMetadataAssertion">
            <con:mode>Received Metadata</con:mode>
            <con:elements>
              <con:path>$['Headers']['x-request-id']</con:path>
              <con:element>x-request-id</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>45b8f819e83029d5</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['date']</con:path>
              <con:element>date</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Fri, 24 Nov 2023 07:53:17 GMT</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-length']</con:path>
              <con:element>content-length</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['expires']</con:path>
              <con:element>expires</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-content-type-options']</con:path>
              <con:element>x-content-type-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>nosniff</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-xss-protection']</con:path>
              <con:element>x-xss-protection</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>1; mode=block</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['x-frame-options']</con:path>
              <con:element>x-frame-options</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>DENY</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['#status#']</con:path>
              <con:element>#status#</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>true</con:enabled>
              <con:expectedValue>HTTP/1.1 204 No Content</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['cache-control']</con:path>
              <con:element>cache-control</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache, no-store, max-age=0, must-revalidate</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['strict-transport-security']</con:path>
              <con:element>strict-transport-security</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>max-age=31536000 ; includeSubDomains</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['pragma']</con:path>
              <con:element>pragma</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:originalMessage>{"Headers":{"x-request-id":"45b8f819e83029d5","date":"Fri, 24 Nov 2023 07:53:17 GMT","content-length":"0","expires":"0","x-content-type-options":"nosniff","x-xss-protection":"1; mode=block","x-frame-options":"DENY","#status#":"HTTP/1.1 204 No Content","cache-control":"no-cache, no-store, max-age=0, must-revalidate","strict-transport-security":"max-age=31536000 ; includeSubDomains","pragma":"no-cache"}}</con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="vin" value="${[Pre-Condition] [OTA-2661] [2] Vehicle is created#RawRequest#$['vin']}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>vin</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="4f515789-2a71-4da6-9bbc-0aff4cd795fa">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="9ba48164-5af1-48d4-aa59-9d1e85e3e71a">
            <con:authProfile>ORU-live</con:authProfile>
          </con:entry>
          <con:entry environmentId="7b56b5f6-5164-4fbf-8821-ef5b0d3790b7">
            <con:authProfile>ORU-app</con:authProfile>
          </con:entry>
          <con:entry environmentId="19d15dbe-9720-4a73-b417-71308b8db01e">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="[Tear-Down] Delete Mock Vehicle" id="abf4a11d-2f5d-4d8e-bbef-e1d6cbb30622">
    <con:settings/>
    <con:config service="VW Group Services Mock" methodName="deleteVehicle" resourcePath="/vehicles/{vin}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="[Tear-Down] Delete Mock Vehicle" id="b5fe47b2-7e9e-43c8-8e0c-f7b64e506f07" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="Authorization" value="Bearer ${#TestCase#accessToken}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://demo.orunext.com</con:endpoint>
        <con:request/>
        <con:originalUri>https://demo.orunext.com/api/vw-group-services-mock/vehicles/W0L0AHL5555555555</con:originalUri>
        <con:assertion type="DataAndMetadataAssertion" id="fd0a4d11-cfd2-4d88-847f-a079c916f43d" name="Status Line is equal to &quot;HTTP/1.1 200 OK&quot;">
          <con:configuration xsi:type="con:DataAndMetadataAssertion">
            <con:mode>Received Metadata</con:mode>
            <con:elements>
              <con:path>$['Headers']['date']</con:path>
              <con:element>date</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Mon, 06 Nov 2023 14:17:54 GMT</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-length']</con:path>
              <con:element>content-length</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['expires']</con:path>
              <con:element>expires</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['content-security-policy']</con:path>
              <con:element>content-security-policy</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>default-src 'self' 'unsafe-eval' 'unsafe-inline' *.orunext.com *.esrlabs.com *.vwgroup.com *.blob.core.windows.net *.blob.core.chinacloudapi.cn *.microsoftonline.com blob: data:; upgrade-insecure-requests;</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['#status#']</con:path>
              <con:element>#status#</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>true</con:enabled>
              <con:expectedValue>HTTP/1.1 200 OK</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['strict-transport-security']</con:path>
              <con:element>strict-transport-security</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>max-age=31536000 ; includeSubDomains</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:elements>
              <con:path>$['Headers']['pragma']</con:path>
              <con:element>pragma</con:element>
              <con:operatorId>1</con:operatorId>
              <con:enabled>false</con:enabled>
              <con:expectedValue>no-cache</con:expectedValue>
              <con:caseSensitive>true</con:caseSensitive>
              <con:numberType>false</con:numberType>
              <con:expectedDataType>1</con:expectedDataType>
            </con:elements>
            <con:originalMessage>{"Headers":{"date":"Mon, 06 Nov 2023 14:17:54 GMT","content-length":"0","expires":"0","content-security-policy":"default-src 'self' 'unsafe-eval' 'unsafe-inline' *.orunext.com *.esrlabs.com *.vwgroup.com *.blob.core.windows.net *.blob.core.chinacloudapi.cn *.microsoftonline.com blob: data:; upgrade-insecure-requests;","#status#":"HTTP/1.1 200 OK","strict-transport-security":"max-age=31536000 ; includeSubDomains","pragma":"no-cache"}}</con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="vin" value="${[Pre-Condition] [OTA-2661] [2] Vehicle is created#RawRequest#$['vin']}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="4f515789-2a71-4da6-9bbc-0aff4cd795fa">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="19d15dbe-9720-4a73-b417-71308b8db01e">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="[Tear-Down] Delete Vehicle Files Directory" id="91a3d95d-760f-470a-828a-76d02426fed8">
    <con:settings/>
    <con:config>
      <script>/* ---------- MAIN CODE ---------- */

//declare variable for the path to the vehicle files
String vehicleFilesPath =  context.expand('${#TestCase#vehicleFilesPath}')

//delete the directory and all its files
deleteDirectory(vehicleFilesPath)

/* ---------- CUSTOM METHODS ---------- */

//methods that deletes a directory
public void deleteDirectory(String path) {
	File directory = new File(path)
	File[] files = directory.listFiles()
	if (files != null) {
		for (File file : files) {
			file.delete()
	   }
	}
	directory.delete();
	log.info("Directory was deleted &lt;&lt;" +  path + ">>")
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="[Tear-Down] Delete Downloaded Vehicle Configuration Files" id="4b188009-b92c-4c13-a0e9-ca3d7e8642ab">
    <con:settings/>
    <con:config>
      <script>/* ---------- MAIN CODE ---------- */

//declare variable for the path to the downloaded  files
String vin = context.expand('${#TestCase#vin}') 
String downloadsDirectory = System.getProperty("user.home") + "\\Downloads"

//delete the downloaded files
deleteFiles(downloadsDirectory, vin)

/* ---------- CUSTOM METHODS ---------- */

//methods that deletes the downloaded files
public void deleteFiles(String path, String vin) {
	File directory = new File(path)
	File[] files = directory.listFiles()
	if (files != null) {
		for (File file : files) {
			if (file.getName().contains("VehicleConfigurations_" + vin)){
				file.delete()
			}
	   }
	}
	directory.delete();
	log.info("Downloaded files were deleted")
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="[Tear-Down] Delete Downloaded Search Results Files" id="db3bae65-98ee-4a89-a880-e591db52438f">
    <con:settings/>
    <con:config>
      <script>/* ---------- MAIN CODE ---------- */

//declare variable for the path to the downloaded  files
String vin = context.expand('${#TestCase#vin}') 
String downloadsDirectory = System.getProperty("user.home") + "\\Downloads"

//delete the downloaded files
deleteFiles(downloadsDirectory, vin)

/* ---------- CUSTOM METHODS ---------- */

//methods that deletes the downloaded files
public void deleteFiles(String path, String vin) {
	File directory = new File(path)
	File[] files = directory.listFiles()
	if (files != null) {
		for (File file : files) {
			if (file.getName().contains("CARB_data" + vin)){
				file.delete()
			}
	   }
	}
	directory.delete();
	log.info("Downloaded files were deleted")
}</script>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>test</con:name>
      <con:value>OTA-19173</con:value>
    </con:property>
    <con:property>
      <con:name>vehicleConfigurationFileName</con:name>
      <con:value>VehicleConfiguration.json</con:value>
    </con:property>
    <con:property>
      <con:name>vehicleConfigurationFileContent</con:name>
      <con:value>{     "schema": "DiagAssemblyStatus_DetailLevel_Update_Schema_V1.3.2.json",     "description": "",     "assemblyStatus": {         "vehicleInformation": {             "VIN": ""         },         "assemblyInformation": [             {                 "ecuInformation": {                     "dataObjects": {                         "partNumber": "85F907468  ",                         "zdcVersion": "",                         "fazitIdString": [                             "BPA-08528.01.2115281234"                         ],                         "zdcPartNumber": "",                         "asamFileVersion": "004030",                         "hardwareVersion": "X09",                         "softwareVersion": "G111",                         "asamFileIdentifier": "EV_HCP5GatewAU416",                         "hardwarePartNumber": "85F907468  "                     },                     "logicalLink": "",                     "diagnosisAddress": "0019"                 }             },             {                 "ecuInformation": {                     "dataObjects": {                         "partNumber": "TESTMOD31",                         "zdcVersion": "----",                         "fazitIdString": [                             "000-00000.00.0000000000"                         ],                         "zdcPartNumber": "-----------",                         "asamFileVersion": "004030",                         "softwareVersion": "G111",                         "asamFileIdentifier": "EV_HCP5MODAU416",                         "hardwarePartNumber": "TESTMOD31"                     },                     "logicalLink": "",                     "diagnosisAddress": "8124"                 }             },             {                 "ecuInformation": {                     "dataObjects": {                         "partNumber": "85E907808  ",                         "zdcVersion": "8109",                         "fazitIdString": [                             "BPG-81020.01.2114800043"                         ],                         "zdcPartNumber": "F5S909133A ",                         "asamFileVersion": "002008",                         "hardwareVersion": "H08",                         "softwareVersion": "X061",                         "asamFileIdentifier": "EV_ELVISAU41X",                         "hardwarePartNumber": "85E907808  "                     },                     "logicalLink": "",                     "diagnosisAddress": "8133"                 }             }         ]     },     "releaseVersion": "1.0.0",     "assemblyStatusMetaData": {         "vcHash": "",         "newestEntryTimestamp": "",         "oldestEntryTimestamp": "2022-06-10T10:38:47.833Z"     } }</con:value>
    </con:property>
    <con:property>
      <con:name>url</con:name>
      <con:value>https://kibana.demo.orunext.com/app/discover#/?_g=(filters:!(),refreshInterval:(pause:!t,value:0),time:(from:now-timeValues,to:now))&amp;_a=(columns:!(),filters:!(('$state':(store:appState),meta:(alias:!n,disabled:!f,index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,key:_index,negate:!f,params:(query:indexValue),type:phrase),query:(match_phrase:(_index:indexValue))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,key:siemMessage.eventId,negate:!f,params:(query:eventIdValue),type:phrase),query:(match_phrase:(siemMessage.eventId:eventIdValue))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,key:siemMessage.action,negate:!f,params:(query:actionValue),type:phrase),query:(match_phrase:(siemMessage.action:actionValue))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,key:siemMessage.eventType,negate:!f,params:(query:eventTypeValue),type:phrase),query:(match_phrase:(siemMessage.eventType:eventTypeValue))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,key:siemMessage.applicationName,negate:!f,params:(query:applicationNameValue),type:phrase),query:(match_phrase:(siemMessage.applicationName:applicationNameValue))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,key:siemMessage.description,negate:!f,params:(query:'descriptionValue'),type:phrase),query:(match_phrase:(siemMessage.description:'descriptionValue'))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,key:siemMessage.actingUser,negate:!f,params:(query:actingUserValue),type:phrase),query:(match_phrase:(siemMessage.actingUser:actingUserValue))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,key:siemMessage.loggedInUser,negate:!f,params:(query:loggedInUserValue),type:phrase),query:(match_phrase:(siemMessage.loggedInUser:loggedInUserValue))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,key:siemMessage.result,negate:!f,params:(query:resultValue),type:phrase),query:(match_phrase:(siemMessage.result:resultValue)))),index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,interval:auto,query:(language:kuery,query:''),sort:!(!(created,desc)))</con:value>
    </con:property>
    <con:property>
      <con:name>altUrl</con:name>
      <con:value>https://kibana.demo.orunext.com/app/discover#/?_g=(filters:!(),refreshInterval:(pause:!t,value:0),time:(from:now-60s,to:now))&amp;_a=(columns:!(),filters:!(('$state':(store:appState),meta:(alias:!n,disabled:!f,index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,key:_index,negate:!f,params:(query:indexValue),type:phrase),query:(match_phrase:(_index:indexValue))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,key:siemMessage.eventId,negate:!f,params:(query:eventIdValue),type:phrase),query:(match_phrase:(siemMessage.eventId:eventIdValue))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,key:siemMessage.action,negate:!f,params:(query:actionValue),type:phrase),query:(match_phrase:(siemMessage.action:actionValue))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,key:siemMessage.eventType,negate:!f,params:(query:eventTypeValue),type:phrase),query:(match_phrase:(siemMessage.eventType:eventTypeValue))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,key:siemMessage.applicationName,negate:!f,params:(query:'applicationNameValue'),type:phrase),query:(match_phrase:(siemMessage.applicationName:'applicationNameValue'))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,key:siemMessage.description,negate:!f,params:(query:'descriptionValue'),type:phrase),query:(match_phrase:(siemMessage.description:'descriptionValue'))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,key:siemMessage.actingUser,negate:!f,params:(query:actingUserValue),type:phrase),query:(match_phrase:(siemMessage.actingUser:actingUserValue))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,key:siemMessage.loggedInUser,negate:!f,params:(query:loggedInUserValue),type:phrase),query:(match_phrase:(siemMessage.loggedInUser:loggedInUserValue))),('$state':(store:appState),meta:(alias:!n,disabled:!f,index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,key:siemMessage.result,negate:!f,params:(query:resultValue),type:phrase),query:(match_phrase:(siemMessage.result:resultValue)))),index:fa26c690-5dd0-11ee-b461-45ce0065d8e0,interval:auto,query:(language:kuery,query:''),sort:!(!(created,desc)))</con:value>
    </con:property>
    <con:property>
      <con:name>expectedIndex</con:name>
      <con:value>siem-message</con:value>
    </con:property>
    <con:property>
      <con:name>expectedEventType</con:name>
      <con:value>ObjectAccess_SensitiveData</con:value>
    </con:property>
    <con:property>
      <con:name>vin</con:name>
      <con:value>AMV20240703182640</con:value>
    </con:property>
    <con:property>
      <con:name>pkn</con:name>
      <con:value>7182640</con:value>
    </con:property>
    <con:property>
      <con:name>modelName</con:name>
      <con:value>A3</con:value>
    </con:property>
    <con:property>
      <con:name>vCreationDate</con:name>
      <con:value>2024-07-03T18:26:40.681Z</con:value>
    </con:property>
    <con:property>
      <con:name>vehicleFilesPath</con:name>
      <con:value>C:\OruNext Backend\OTA-19177\OTA-19173\vehicle-files</con:value>
    </con:property>
    <con:property>
      <con:name>vehicleConfigurationFilePath</con:name>
      <con:value>C:\OruNext Backend\OTA-19177\OTA-19173\vehicle-files\VehicleConfiguration.json</con:value>
    </con:property>
    <con:property>
      <con:name>vcHash</con:name>
      <con:value>7B5981A3936E1F309EF52FAD1F23E48571F27A250B9AC86D42673287A60EC304</con:value>
    </con:property>
    <con:property>
      <con:name>accessToken</con:name>
      <con:value>eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJJQjNRTk5TWUJibUJ6ajNaRTM4aFY3dWZYUWhWbjlUcWhDUFpfWlhDTDFnIn0.eyJleHAiOjE3MjAwMjIyMDAsImlhdCI6MTcyMDAyMDQwMCwianRpIjoiM2M2NzhhOTQtNThmZS00NThmLWEyNDMtNWNlOThjMjQwNmRmIiwiaXNzIjoiaHR0cHM6Ly9pZHAuY2xvdWQudndncm91cC5jb20vYXV0aC9yZWFsbXMva3Vtcy1tZmEiLCJhdWQiOiJpZHAtZGQxMTU3ZmEtOTJkNS00YjI5LTgxZWEtNTRhM2JiMGU5YTU4LW9ydW5leHQtbWZhLXB1YmxpYyIsInN1YiI6ImQ5NmY4YjY4LTM4ZWYtNGZkNy1iZDkzLWMxOGY1MmZhN2I3MSIsInR5cCI6IkJlYXJlciIsImF6cCI6ImlkcC1kZDExNTdmYS05MmQ1LTRiMjktODFlYS01NGEzYmIwZTlhNTgtb3J1bmV4dC1tZmEtcHVibGljIiwic2Vzc2lvbl9zdGF0ZSI6IjZiYThiYzRhLTNjNDgtNDFlYi05ZmEwLTg5ZDBhZTFmOGVlMyIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwczovL2NjbW9jay5hcHBzLmRlbW8udWNsLm9ydW5leHQuY29tIiwiaHR0cHM6Ly9hcHAub3J1bmV4dC5jb20iLCJodHRwczovL3BsYXlncm91bmQub3J1bmV4dC5jb20iLCJodHRwczovL2NjbW9jay5hcHBzLmFwcHJvdmFsLnVjbC5vcnVuZXh0LmNvbSIsImh0dHBzOi8vZGVtby5vcnVuZXh0LnZ3YXV0b2Nsb3VkLmNuIiwiaHR0cHM6Ly9hcHAub3J1bmV4dC52d2F1dG9jbG91ZC5jbiIsImh0dHBzOi8vZGVtby5vcnVuZXh0LmNvbSIsImh0dHBzOi8vYXBwLm5hci5vcnVuZXh0LmNvbSIsImh0dHBzOi8vbWVnYS5wbGF5Z3JvdW5kLm9ydW5leHQuY29tIiwiaHR0cHM6Ly90dWktY2Ntb2NrLXVjbC1vcnVuZXh0MjAuYXBwcy5tZWdhLmNhcmlhZC5jbG91ZCIsImh0dHBzOi8vY2Ntb2NrLWFwcHItdWNsLmFwcHMubWVnYS5jYXJpYWQuY2xvdWQiXSwicmVzb3VyY2VfYWNjZXNzIjp7InZ3YWcta3VtcyI6eyJyb2xlcyI6WyJWV0FHX09SVU5FWFRfRUNFX1BSSk1NQlJfREVNTyIsIlZXQUdfT1JVTkVYVF9FQ0VfU3VwT3Buc19ERU1PX1AiLCJWV0FHX09SVU5FWFRfTkFSX1Byak1tYnJfQVBQX0EiLCJWV0FHX09SVU5FWFRfTkFSX1NVUE9QTlNfTElWRSIsIlZXQUdfT1JVTkVYVF9OQVJfUHJqTW1icl9ERU1PX0EiLCJWV0FHX09SVU5FWFRfRUNFX0NNUE1HUklfTElWRV9BIiwiVldBR19PUlVOZXh0X0FQU19BUFAiLCJWV0FHX09SVU5leHRfQVBTX1VBX0RFTU8iLCJWV0FHX09SVU5leHRfQkFDS0VORF9ERU1PIiwiVldBR19PUlVOZXh0X0FQU19VQV9BUFAiLCJWV0FHX09SVU5FWFRfQ0FSQl9ERU1PIiwiVldBR19PUlVORVhUX0VDRV9QcmpNbWJyX0FQUF9QIiwiVldBR19PUlVORVhUX0VDRV9QcmpNbWJyX0RFTU9fQSIsIlZXQUdfT1JVTmV4dF9UQVVfREVNTyIsIlZXQUdfT1JVTmV4dF9CQUNLRU5EX0FQUCIsIlZXQUdfT1JVTkVYVF9FQ0VfUHJqTW1icl9BUFBfQSIsIlZXQUdfT1JVTmV4dF9UQVVfQVBQIiwiVldBR19PUlVOZXh0X0FQU19ERU1PIiwiVldBR19PUlVORVhUX05BUl9TdXBPcG5zX0RFTU9fQSIsIlZXQUdfT1JVTkVYVF9FQ0VfUHJqTW1icl9ERU1PX1AiLCJWV0FHX09SVU5leHRfVkNQX0RFTU8iLCJWV0FHX09SVU5FWFRfRUNFX1N1cE9wbnNfQVBQX0EiLCJWV0FHX09SVU5leHRfRUNFX0Jja0FkbW5fTElWRV9DIiwiVldBR19PUlVORVhUX0VDRV9TdXBPcG5zX0RFTU9fQSIsIlZXQUdfT1JVTmV4dF9WQ1BfQVBQIiwiVldBR19PUlVORVhUX05BUl9TdXBPcG5zX0FQUF9BIiwiVldBR19PUlVORVhUX0VDRV9TdXBPcG5zX0FQUF9QIl19fSwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInNpZCI6IjZiYThiYzRhLTNjNDgtNDFlYi05ZmEwLTg5ZDBhZTFmOGVlMyIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6IlN0YXR1c2h1YiBTeXN0ZW11c2VyIiwiZ3JvdXBzIjpbIlZXQUdfT1JVTkVYVF9FQ0VfUFJKTU1CUl9ERU1PIiwiVldBR19PUlVORVhUX0VDRV9TdXBPcG5zX0RFTU9fUCIsIlZXQUdfT1JVTkVYVF9OQVJfUHJqTW1icl9BUFBfQSIsIlZXQUdfT1JVTkVYVF9OQVJfU1VQT1BOU19MSVZFIiwiVldBR19PUlVORVhUX05BUl9QcmpNbWJyX0RFTU9fQSIsIlZXQUdfT1JVTkVYVF9FQ0VfQ01QTUdSSV9MSVZFX0EiLCJWV0FHX09SVU5leHRfQVBTX0FQUCIsIlZXQUdfT1JVTmV4dF9BUFNfVUFfREVNTyIsIlZXQUdfT1JVTmV4dF9CQUNLRU5EX0RFTU8iLCJWV0FHX09SVU5leHRfQVBTX1VBX0FQUCIsIlZXQUdfT1JVTkVYVF9DQVJCX0RFTU8iLCJWV0FHX09SVU5FWFRfRUNFX1Byak1tYnJfQVBQX1AiLCJWV0FHX09SVU5FWFRfRUNFX1Byak1tYnJfREVNT19BIiwiVldBR19PUlVOZXh0X1RBVV9ERU1PIiwiVldBR19PUlVOZXh0X0JBQ0tFTkRfQVBQIiwiVldBR19PUlVORVhUX0VDRV9QcmpNbWJyX0FQUF9BIiwiVldBR19PUlVOZXh0X1RBVV9BUFAiLCJWV0FHX09SVU5leHRfQVBTX0RFTU8iLCJWV0FHX09SVU5FWFRfTkFSX1N1cE9wbnNfREVNT19BIiwiVldBR19PUlVORVhUX0VDRV9QcmpNbWJyX0RFTU9fUCIsIlZXQUdfT1JVTmV4dF9WQ1BfREVNTyIsIlZXQUdfT1JVTkVYVF9FQ0VfU3VwT3Buc19BUFBfQSIsIlZXQUdfT1JVTmV4dF9FQ0VfQmNrQWRtbl9MSVZFX0MiLCJWV0FHX09SVU5FWFRfRUNFX1N1cE9wbnNfREVNT19BIiwiVldBR19PUlVOZXh0X1ZDUF9BUFAiLCJWV0FHX09SVU5FWFRfTkFSX1N1cE9wbnNfQVBQX0EiLCJWV0FHX09SVU5FWFRfRUNFX1N1cE9wbnNfQVBQX1AiXSwicHJlZmVycmVkX3VzZXJuYW1lIjoiZWRycWE0YiIsImdpdmVuX25hbWUiOiJTdGF0dXNodWIiLCJmYW1pbHlfbmFtZSI6IlN5c3RlbXVzZXIiLCJlbWFpbCI6ImFzdXRvc2guam9zaGlAY2FyaWFkLnRlY2hub2xvZ3kifQ.XM8ZwcqKKNNSOc75f_N7eQfIfDcqwWI7VHq00C2fOBvqz4PZBharyGqEPF2tsfN4Bvb_VR_L0gH7Rsw4jay_hos9OnEFY0F49H87HfXAtEZZ1xjN6GLjPPVOfGJUqpNI3jQP6EPSLdzALRJHgBnhxV-8cHVenpoBtHg-Uk1KVSh0-8h1Vgi0rhVfFemMrrgYls-_5tM4g5m9h9VI15KQ5Xce-L-krCXAUicE8in4UaiJ8Jpw5vNw3sxROiD3VzMUOb2VgnCZJnFpiqN4fY1KKRBpnPhb1icDB23Yv6VVDBjrC3uob2p6NXLzsS80fdLibEM5qwr6HHeLIK4Zxiagtw</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:environmentSpec>
    <con:entry environmentId="19d15dbe-9720-4a73-b417-71308b8db01e">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
  </con:environmentSpec>
  <con:tagId>5c2f1049-b510-4b69-ae4e-9ac16953a0ec</con:tagId>
</con:testCase>
