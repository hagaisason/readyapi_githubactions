<?xml version="1.0" encoding="UTF-8"?>
<con:testSuite id="9f0c4746-4623-433d-bfaf-b09b4a5b0cca" name="Test Suite OTA - 4335:  Add MeasureId to UpdateJob" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="c9b7c693-217a-4630-b456-f53e4d30ffadfileName">Test-Suite-OTA---4335%3A--Add-MeasureId-to-UpdateJob</con:setting>
    <con:setting id="9f0c4746-4623-433d-bfaf-b09b4a5b0ccafileName">Test-Suite-OTA---4335%3A--Add-MeasureId-to-UpdateJob</con:setting>
  </con:settings>
  <con:runType>SEQUENTIAL</con:runType>
  <con:properties>
    <con:property>
      <con:name>reCallActionCode</con:name>
      <con:value>R275</con:value>
    </con:property>
    <con:property>
      <con:name>criterion</con:name>
      <con:value>98</con:value>
    </con:property>
    <con:property>
      <con:name>changeMeasureCode</con:name>
      <con:value>CMC7975</con:value>
    </con:property>
    <con:property>
      <con:name>VIN_string</con:name>
      <con:value>"FAKEVIN6874749796"</con:value>
    </con:property>
    <con:property>
      <con:name>VIN</con:name>
      <con:value>FAKEVIN6874749796</con:value>
    </con:property>
    <con:property>
      <con:name>jsonBody</con:name>
      <con:value>{	  "vin" : "FAKEVIN6874749796",	  "mbv_model_code" : "4N803A",	  "mbt_model_code" : "4N42",	  "brand_code" : "A",	  "pkn" : "540616478",	  "delivering_dealer" : "125",	  "supervising_dealer" : "CHN79601076",	  "ordering_dealer" : "CHN79601061",	  "equipment_codes" : ["0K0"],	  "model_year" : 2021,	  "model_name" : "Q7",	  "oru_relevant": true,       "oru_relevant_date": "2022-04-12T09:28:21.363Z",       "update_status": "CUSTOMER_NOTIFIED"	}</con:value>
    </con:property>
    <con:property>
      <con:name>odxName</con:name>
      <con:value>FL_68SCL2N4I_T784_TEST.odx-f</con:value>
    </con:property>
    <con:property>
      <con:name>oucName1</con:name>
      <con:value>FL_68SCL2N4I_T784_TEST.ouc</con:value>
    </con:property>
    <con:property>
      <con:name>binName1</con:name>
      <con:value>141db0a1bebbb5d8e4049ff6fe28d91c.bin</con:value>
    </con:property>
    <con:property>
      <con:name>binName2</con:name>
      <con:value>839a4cf80747775074942ad93891a244.bin</con:value>
    </con:property>
    <con:property>
      <con:name>vcHash</con:name>
      <con:value>35C978A681AC55DBAE52BBB74CD3734F4F7096425AF513E27D606D78EA2E4264</con:value>
    </con:property>
    <con:property>
      <con:name>VC_path</con:name>
      <con:value>file:C:\Users\U3635\Documents\VirtualVehicle\orunext-backend\Templates\VehicleConfiguration.json</con:value>
    </con:property>
    <con:property>
      <con:name>VM_path</con:name>
      <con:value>file:C:\Users\U3635\Documents\VirtualVehicle\orunext-backend\Templates\VehicleManifest.json</con:value>
    </con:property>
  </con:properties>
  <con:tearDownScript>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext

// get the name of the test suite
def testSuiteName = context.getTestSuite().name

// get the status of the test suite
def testSuiteStatus = context.getTestRunner().getStatus().toString()

// get the number of reruns from the project property
def noOfReruns = Integer.parseInt(context.expand('${#Project#noOfReruns}'))

// set the initial status for the tets suite
def failTestSuite = false

// declare the name of the test step
def testStepName = "Set execution status"

// check which test case failed and rerun it a given number of times
// iterate over the test case results in the test suite
for (testCaseResult in runner.results) {
    // get the name of the current test case
    def testCaseName = testCaseResult.getTestCase().name

    // check if the test case failed
    if (testCaseResult.getStatus().toString() == 'FAIL') {
        def testCaseRunner 
        
        // attempt to rerun the test case up to the specified number of times
        for (i = 0; i &lt; noOfReruns; i++) {
            // log each rerun attempt
            log.info("[Test Case] [Rerun] [Attempt " + (i + 1) + "] [Started]: " + testCaseName)

            // rerun the test case
            testCaseRunner  = testCaseResult.testCase.run(null, false)

            // break if the rerun passes
            if (testCaseRunner .getStatus().toString() == "PASS") {
			// log the passed result of the rerun attempt
           	 log.info("[Test Case] [Rerun] [Attempt " + (i + 1) + "] [Passed]: " + testCaseName)
       
                runner.status = Status.FINISHED
                break
            }
        }
        // mark the test suite as failed if the reruns fail
        if (testCaseRunner .getStatus().toString() == "FAILED") {
            // log the failed result of each rerun attempt
            log.info("[Test Case] [Rerun] [Attempt " + (i + 1) + "] [Failed]: " + testCaseName)

            failTestSuite = true
        }
    }
}

// run the necessary test step to update the JIRA regression for the acceptence criteria that passed
// iterate over the test case results in the test suite
for (testCaseResult in runner.results) {
    // check if the test case passed
    if (testCaseResult.getStatus().toString() == 'PASS') {
        runTestStep(testCaseResult, testStepName)
    }
}

// set the overall status of the test suite based on the rerun results
if (failTestSuite) {
    runner.status = Status.FAILED
}

// log the final result of the test suite execution
if (testSuiteStatus == 'FAIL') {
    log.info("[Test Suite] [Failed]: " + testSuiteName)
}
else if (testSuiteStatus == 'PASS') {
    log.info("[Test Suite] [Passed]: " + testSuiteName)
}

//-------------------- METHODS --------------------//

// method to run a test step and log the results
public void runTestStep(def testCaseResult, String testStepName){
    // get the name of the current test case
    def testCaseName = testCaseResult.getTestCase().name

    // get the specific test step by name
    def testStep = testCaseResult.testCase.getTestStepByName(testStepName)

    // create a new runner and context for the test step
    def testCaseRunner = new WsdlTestCaseRunner(testCaseResult.testCase, null)
    def testCaseRunContext = new WsdlTestRunContext(testStep)

    // log the attempt to run the test step
    log.info("[" + testCaseName + "][Test Step] [Started]: " + testStepName)

    // run the test step with the test case runner and context
    def testStepResult = testStep.run(testCaseRunner, testCaseRunContext)

    // log the result of the test step run
    log.info("[" + testCaseName + "][Test Step] [Completed]: " + testStepName)
    log.info("[" + testCaseName + "][Test Step] [Status]: " + testStepResult.getStatus())
    log.info("[" + testCaseName + "][Test Step] [Response]: " + testStepResult.getResponse().getContentAsString())
}</con:tearDownScript>
  <con:reportParameters/>
  <con:environmentSpec>
    <con:entry environmentId="19d15dbe-9720-4a73-b417-71308b8db01e">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
  </con:environmentSpec>
  <con:tagId>a1f487ae-1498-4d18-b8c6-d7f87f4691b3</con:tagId>
</con:testSuite>
